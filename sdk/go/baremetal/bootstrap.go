// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package baremetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Bootstrap struct {
	pulumi.ResourceState

	// Name part of the provisioner release archive file.
	ArchiveName pulumi.StringOutput `pulumi:"archiveName"`
	// Provisioner binary path on the remote system.
	BinPath pulumi.StringOutput `pulumi:"binPath"`
	// Binary download command.
	Download remote.CommandOutput `pulumi:"download"`
	Extract  remote.CommandOutput `pulumi:"extract"`
	// Name part of the provisioner binary file.
	FileName pulumi.StringOutput `pulumi:"fileName"`
	// Destination directory mkdir command.
	Mkdir remote.CommandOutput `pulumi:"mkdir"`
	// Temp download directory mktemp command.
	Mktemp remote.CommandOutput `pulumi:"mktemp"`
	// Command to move the binary from the temp directory to the destination.
	Mv remote.CommandOutput `pulumi:"mv"`
	// Temp directory path output by the mktemp command.
	TempDir pulumi.StringOutput `pulumi:"tempDir"`
	// Url of the provisioner release archive.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewBootstrap registers a new resource with the given unique name, arguments, and options.
func NewBootstrap(ctx *pulumi.Context,
	name string, args *BootstrapArgs, opts ...pulumi.ResourceOption) (*Bootstrap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.Connection != nil {
		args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v *remote.Connection) *remote.Connection { return v.Defaults() }).(*remote.ConnectionOutput)
	}
	if args.Directory == nil {
		args.Directory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bootstrap
	err := ctx.RegisterRemoteComponentResource("baremetal:index:Bootstrap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type bootstrapArgs struct {
	Connection *remote.Connection `pulumi:"connection"`
	// The directory to store the provisioner binary.
	Directory *string `pulumi:"directory"`
	// The version of the provisioner to bootstrap
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Bootstrap resource.
type BootstrapArgs struct {
	Connection *remote.ConnectionInput
	// The directory to store the provisioner binary.
	Directory pulumi.StringPtrInput
	// The version of the provisioner to bootstrap
	Version pulumi.StringInput
}

func (BootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bootstrapArgs)(nil)).Elem()
}

type BootstrapInput interface {
	pulumi.Input

	ToBootstrapOutput() BootstrapOutput
	ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput
}

func (*Bootstrap) ElementType() reflect.Type {
	return reflect.TypeOf((**Bootstrap)(nil)).Elem()
}

func (i *Bootstrap) ToBootstrapOutput() BootstrapOutput {
	return i.ToBootstrapOutputWithContext(context.Background())
}

func (i *Bootstrap) ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootstrapOutput)
}

func (i *Bootstrap) ToOutput(ctx context.Context) pulumix.Output[*Bootstrap] {
	return pulumix.Output[*Bootstrap]{
		OutputState: i.ToBootstrapOutputWithContext(ctx).OutputState,
	}
}

type BootstrapOutput struct{ *pulumi.OutputState }

func (BootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bootstrap)(nil)).Elem()
}

func (o BootstrapOutput) ToBootstrapOutput() BootstrapOutput {
	return o
}

func (o BootstrapOutput) ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput {
	return o
}

func (o BootstrapOutput) ToOutput(ctx context.Context) pulumix.Output[*Bootstrap] {
	return pulumix.Output[*Bootstrap]{
		OutputState: o.OutputState,
	}
}

// Name part of the provisioner release archive file.
func (o BootstrapOutput) ArchiveName() pulumi.StringOutput {
	return o.ApplyT(func(v *Bootstrap) pulumi.StringOutput { return v.ArchiveName }).(pulumi.StringOutput)
}

// Provisioner binary path on the remote system.
func (o BootstrapOutput) BinPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Bootstrap) pulumi.StringOutput { return v.BinPath }).(pulumi.StringOutput)
}

// Binary download command.
func (o BootstrapOutput) Download() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Download }).(remote.CommandOutput)
}

func (o BootstrapOutput) Extract() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Extract }).(remote.CommandOutput)
}

// Name part of the provisioner binary file.
func (o BootstrapOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v *Bootstrap) pulumi.StringOutput { return v.FileName }).(pulumi.StringOutput)
}

// Destination directory mkdir command.
func (o BootstrapOutput) Mkdir() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Mkdir }).(remote.CommandOutput)
}

// Temp download directory mktemp command.
func (o BootstrapOutput) Mktemp() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Mktemp }).(remote.CommandOutput)
}

// Command to move the binary from the temp directory to the destination.
func (o BootstrapOutput) Mv() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Mv }).(remote.CommandOutput)
}

// Temp directory path output by the mktemp command.
func (o BootstrapOutput) TempDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Bootstrap) pulumi.StringOutput { return v.TempDir }).(pulumi.StringOutput)
}

// Url of the provisioner release archive.
func (o BootstrapOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Bootstrap) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BootstrapInput)(nil)).Elem(), &Bootstrap{})
	pulumi.RegisterOutputType(BootstrapOutput{})
}
