// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package baremetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Bootstrap struct {
	pulumi.ResourceState

	Download remote.CommandOutput `pulumi:"download"`
	Mktemp   remote.CommandOutput `pulumi:"mktemp"`
	Url      pulumi.StringOutput  `pulumi:"url"`
}

// NewBootstrap registers a new resource with the given unique name, arguments, and options.
func NewBootstrap(ctx *pulumi.Context,
	name string, args *BootstrapArgs, opts ...pulumi.ResourceOption) (*Bootstrap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v remote.Connection) remote.Connection { return *v.Defaults() }).(remote.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bootstrap
	err := ctx.RegisterRemoteComponentResource("baremetal:index:Bootstrap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type bootstrapArgs struct {
	Connection remote.Connection `pulumi:"connection"`
	Version    string            `pulumi:"version"`
}

// The set of arguments for constructing a Bootstrap resource.
type BootstrapArgs struct {
	Connection remote.ConnectionInput
	Version    string
}

func (BootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bootstrapArgs)(nil)).Elem()
}

type BootstrapInput interface {
	pulumi.Input

	ToBootstrapOutput() BootstrapOutput
	ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput
}

func (*Bootstrap) ElementType() reflect.Type {
	return reflect.TypeOf((**Bootstrap)(nil)).Elem()
}

func (i *Bootstrap) ToBootstrapOutput() BootstrapOutput {
	return i.ToBootstrapOutputWithContext(context.Background())
}

func (i *Bootstrap) ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootstrapOutput)
}

func (i *Bootstrap) ToOutput(ctx context.Context) pulumix.Output[*Bootstrap] {
	return pulumix.Output[*Bootstrap]{
		OutputState: i.ToBootstrapOutputWithContext(ctx).OutputState,
	}
}

type BootstrapOutput struct{ *pulumi.OutputState }

func (BootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bootstrap)(nil)).Elem()
}

func (o BootstrapOutput) ToBootstrapOutput() BootstrapOutput {
	return o
}

func (o BootstrapOutput) ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput {
	return o
}

func (o BootstrapOutput) ToOutput(ctx context.Context) pulumix.Output[*Bootstrap] {
	return pulumix.Output[*Bootstrap]{
		OutputState: o.OutputState,
	}
}

func (o BootstrapOutput) Download() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Download }).(remote.CommandOutput)
}

func (o BootstrapOutput) Mktemp() remote.CommandOutput {
	return o.ApplyT(func(v *Bootstrap) remote.CommandOutput { return v.Mktemp }).(remote.CommandOutput)
}

func (o BootstrapOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Bootstrap) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BootstrapInput)(nil)).Elem(), &Bootstrap{})
	pulumi.RegisterOutputType(BootstrapOutput{})
}
