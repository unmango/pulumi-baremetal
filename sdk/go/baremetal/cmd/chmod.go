// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Chmod struct {
	pulumi.CustomResourceState

	Args         ChmodArgsTypeOutput      `pulumi:"args"`
	CreatedFiles pulumi.StringArrayOutput `pulumi:"createdFiles"`
	ExitCode     pulumi.IntOutput         `pulumi:"exitCode"`
	MovedFiles   pulumi.StringMapOutput   `pulumi:"movedFiles"`
	Stderr       pulumi.StringOutput      `pulumi:"stderr"`
	Stdout       pulumi.StringOutput      `pulumi:"stdout"`
}

// NewChmod registers a new resource with the given unique name, arguments, and options.
func NewChmod(ctx *pulumi.Context,
	name string, args *ChmodArgs, opts ...pulumi.ResourceOption) (*Chmod, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Files == nil {
		return nil, errors.New("invalid value for required argument 'Files'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Chmod
	err := ctx.RegisterResource("baremetal:cmd:Chmod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChmod gets an existing Chmod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChmod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChmodState, opts ...pulumi.ResourceOption) (*Chmod, error) {
	var resource Chmod
	err := ctx.ReadResource("baremetal:cmd:Chmod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Chmod resources.
type chmodState struct {
}

type ChmodState struct {
}

func (ChmodState) ElementType() reflect.Type {
	return reflect.TypeOf((*chmodState)(nil)).Elem()
}

type chmodArgs struct {
	Changes        *bool    `pulumi:"changes"`
	Files          []string `pulumi:"files"`
	Help           *bool    `pulumi:"help"`
	Mode           []string `pulumi:"mode"`
	NoPreserveRoot *bool    `pulumi:"noPreserveRoot"`
	OctalMode      *string  `pulumi:"octalMode"`
	PreserveRoot   *bool    `pulumi:"preserveRoot"`
	Quiet          *bool    `pulumi:"quiet"`
	Recursive      *bool    `pulumi:"recursive"`
	Reference      *string  `pulumi:"reference"`
	Verbose        *bool    `pulumi:"verbose"`
	Version        *bool    `pulumi:"version"`
}

// The set of arguments for constructing a Chmod resource.
type ChmodArgs struct {
	Changes        pulumi.BoolPtrInput
	Files          pulumi.StringArrayInput
	Help           pulumi.BoolPtrInput
	Mode           pulumi.StringArrayInput
	NoPreserveRoot pulumi.BoolPtrInput
	OctalMode      pulumi.StringPtrInput
	PreserveRoot   pulumi.BoolPtrInput
	Quiet          pulumi.BoolPtrInput
	Recursive      pulumi.BoolPtrInput
	Reference      pulumi.StringPtrInput
	Verbose        pulumi.BoolPtrInput
	Version        pulumi.BoolPtrInput
}

func (ChmodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chmodArgs)(nil)).Elem()
}

type ChmodInput interface {
	pulumi.Input

	ToChmodOutput() ChmodOutput
	ToChmodOutputWithContext(ctx context.Context) ChmodOutput
}

func (*Chmod) ElementType() reflect.Type {
	return reflect.TypeOf((**Chmod)(nil)).Elem()
}

func (i *Chmod) ToChmodOutput() ChmodOutput {
	return i.ToChmodOutputWithContext(context.Background())
}

func (i *Chmod) ToChmodOutputWithContext(ctx context.Context) ChmodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChmodOutput)
}

func (i *Chmod) ToOutput(ctx context.Context) pulumix.Output[*Chmod] {
	return pulumix.Output[*Chmod]{
		OutputState: i.ToChmodOutputWithContext(ctx).OutputState,
	}
}

type ChmodOutput struct{ *pulumi.OutputState }

func (ChmodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Chmod)(nil)).Elem()
}

func (o ChmodOutput) ToChmodOutput() ChmodOutput {
	return o
}

func (o ChmodOutput) ToChmodOutputWithContext(ctx context.Context) ChmodOutput {
	return o
}

func (o ChmodOutput) ToOutput(ctx context.Context) pulumix.Output[*Chmod] {
	return pulumix.Output[*Chmod]{
		OutputState: o.OutputState,
	}
}

func (o ChmodOutput) Args() ChmodArgsTypeOutput {
	return o.ApplyT(func(v *Chmod) ChmodArgsTypeOutput { return v.Args }).(ChmodArgsTypeOutput)
}

func (o ChmodOutput) CreatedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Chmod) pulumi.StringArrayOutput { return v.CreatedFiles }).(pulumi.StringArrayOutput)
}

func (o ChmodOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v *Chmod) pulumi.IntOutput { return v.ExitCode }).(pulumi.IntOutput)
}

func (o ChmodOutput) MovedFiles() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Chmod) pulumi.StringMapOutput { return v.MovedFiles }).(pulumi.StringMapOutput)
}

func (o ChmodOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Chmod) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

func (o ChmodOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Chmod) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChmodInput)(nil)).Elem(), &Chmod{})
	pulumi.RegisterOutputType(ChmodOutput{})
}
