// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Rm struct {
	pulumi.CustomResourceState

	Args         RmArgsTypeOutput         `pulumi:"args"`
	CreatedFiles pulumi.StringArrayOutput `pulumi:"createdFiles"`
	ExitCode     pulumi.IntOutput         `pulumi:"exitCode"`
	MovedFiles   pulumi.StringMapOutput   `pulumi:"movedFiles"`
	Stderr       pulumi.StringOutput      `pulumi:"stderr"`
	Stdout       pulumi.StringOutput      `pulumi:"stdout"`
}

// NewRm registers a new resource with the given unique name, arguments, and options.
func NewRm(ctx *pulumi.Context,
	name string, args *RmArgs, opts ...pulumi.ResourceOption) (*Rm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Files == nil {
		return nil, errors.New("invalid value for required argument 'Files'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rm
	err := ctx.RegisterResource("baremetal:cmd:Rm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRm gets an existing Rm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RmState, opts ...pulumi.ResourceOption) (*Rm, error) {
	var resource Rm
	err := ctx.ReadResource("baremetal:cmd:Rm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rm resources.
type rmState struct {
}

type RmState struct {
}

func (RmState) ElementType() reflect.Type {
	return reflect.TypeOf((*rmState)(nil)).Elem()
}

type rmArgs struct {
	Dir           *bool    `pulumi:"dir"`
	Files         []string `pulumi:"files"`
	Force         *bool    `pulumi:"force"`
	Help          *bool    `pulumi:"help"`
	OneFileSystem *bool    `pulumi:"oneFileSystem"`
	Recursive     *bool    `pulumi:"recursive"`
	Verbose       *bool    `pulumi:"verbose"`
}

// The set of arguments for constructing a Rm resource.
type RmArgs struct {
	Dir           pulumi.BoolPtrInput
	Files         pulumi.StringArrayInput
	Force         pulumi.BoolPtrInput
	Help          pulumi.BoolPtrInput
	OneFileSystem pulumi.BoolPtrInput
	Recursive     pulumi.BoolPtrInput
	Verbose       pulumi.BoolPtrInput
}

func (RmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rmArgs)(nil)).Elem()
}

type RmInput interface {
	pulumi.Input

	ToRmOutput() RmOutput
	ToRmOutputWithContext(ctx context.Context) RmOutput
}

func (*Rm) ElementType() reflect.Type {
	return reflect.TypeOf((**Rm)(nil)).Elem()
}

func (i *Rm) ToRmOutput() RmOutput {
	return i.ToRmOutputWithContext(context.Background())
}

func (i *Rm) ToRmOutputWithContext(ctx context.Context) RmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmOutput)
}

func (i *Rm) ToOutput(ctx context.Context) pulumix.Output[*Rm] {
	return pulumix.Output[*Rm]{
		OutputState: i.ToRmOutputWithContext(ctx).OutputState,
	}
}

type RmOutput struct{ *pulumi.OutputState }

func (RmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rm)(nil)).Elem()
}

func (o RmOutput) ToRmOutput() RmOutput {
	return o
}

func (o RmOutput) ToRmOutputWithContext(ctx context.Context) RmOutput {
	return o
}

func (o RmOutput) ToOutput(ctx context.Context) pulumix.Output[*Rm] {
	return pulumix.Output[*Rm]{
		OutputState: o.OutputState,
	}
}

func (o RmOutput) Args() RmArgsTypeOutput {
	return o.ApplyT(func(v *Rm) RmArgsTypeOutput { return v.Args }).(RmArgsTypeOutput)
}

func (o RmOutput) CreatedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringArrayOutput { return v.CreatedFiles }).(pulumi.StringArrayOutput)
}

func (o RmOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v *Rm) pulumi.IntOutput { return v.ExitCode }).(pulumi.IntOutput)
}

func (o RmOutput) MovedFiles() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringMapOutput { return v.MovedFiles }).(pulumi.StringMapOutput)
}

func (o RmOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

func (o RmOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RmInput)(nil)).Elem(), &Rm{})
	pulumi.RegisterOutputType(RmOutput{})
}
