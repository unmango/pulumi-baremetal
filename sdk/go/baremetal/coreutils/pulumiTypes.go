// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package coreutils

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

var _ = internal.GetEnvOrDefault

type CatArgsType struct {
	E               *bool    `pulumi:"e"`
	Files           []string `pulumi:"files"`
	Help            *bool    `pulumi:"help"`
	Number          *bool    `pulumi:"number"`
	NumberNonblank  *bool    `pulumi:"numberNonblank"`
	ShowAll         *bool    `pulumi:"showAll"`
	ShowEnds        *bool    `pulumi:"showEnds"`
	ShowNonprinting *bool    `pulumi:"showNonprinting"`
	ShowTabs        *bool    `pulumi:"showTabs"`
	SqueezeBlank    *bool    `pulumi:"squeezeBlank"`
	T               *bool    `pulumi:"t"`
	Version         *bool    `pulumi:"version"`
}

// CatArgsTypeInput is an input type that accepts CatArgsTypeArgs and CatArgsTypeOutput values.
// You can construct a concrete instance of `CatArgsTypeInput` via:
//
//	CatArgsTypeArgs{...}
type CatArgsTypeInput interface {
	pulumi.Input

	ToCatArgsTypeOutput() CatArgsTypeOutput
	ToCatArgsTypeOutputWithContext(context.Context) CatArgsTypeOutput
}

type CatArgsTypeArgs struct {
	E               pulumi.BoolPtrInput     `pulumi:"e"`
	Files           pulumi.StringArrayInput `pulumi:"files"`
	Help            pulumi.BoolPtrInput     `pulumi:"help"`
	Number          pulumi.BoolPtrInput     `pulumi:"number"`
	NumberNonblank  pulumi.BoolPtrInput     `pulumi:"numberNonblank"`
	ShowAll         pulumi.BoolPtrInput     `pulumi:"showAll"`
	ShowEnds        pulumi.BoolPtrInput     `pulumi:"showEnds"`
	ShowNonprinting pulumi.BoolPtrInput     `pulumi:"showNonprinting"`
	ShowTabs        pulumi.BoolPtrInput     `pulumi:"showTabs"`
	SqueezeBlank    pulumi.BoolPtrInput     `pulumi:"squeezeBlank"`
	T               pulumi.BoolPtrInput     `pulumi:"t"`
	Version         pulumi.BoolPtrInput     `pulumi:"version"`
}

func (CatArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatArgsType)(nil)).Elem()
}

func (i CatArgsTypeArgs) ToCatArgsTypeOutput() CatArgsTypeOutput {
	return i.ToCatArgsTypeOutputWithContext(context.Background())
}

func (i CatArgsTypeArgs) ToCatArgsTypeOutputWithContext(ctx context.Context) CatArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatArgsTypeOutput)
}

func (i CatArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[CatArgsType] {
	return pulumix.Output[CatArgsType]{
		OutputState: i.ToCatArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type CatArgsTypeOutput struct{ *pulumi.OutputState }

func (CatArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatArgsType)(nil)).Elem()
}

func (o CatArgsTypeOutput) ToCatArgsTypeOutput() CatArgsTypeOutput {
	return o
}

func (o CatArgsTypeOutput) ToCatArgsTypeOutputWithContext(ctx context.Context) CatArgsTypeOutput {
	return o
}

func (o CatArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[CatArgsType] {
	return pulumix.Output[CatArgsType]{
		OutputState: o.OutputState,
	}
}

func (o CatArgsTypeOutput) E() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.E }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CatArgsType) []string { return v.Files }).(pulumi.StringArrayOutput)
}

func (o CatArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) Number() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.Number }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) NumberNonblank() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.NumberNonblank }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) ShowAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.ShowAll }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) ShowEnds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.ShowEnds }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) ShowNonprinting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.ShowNonprinting }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) ShowTabs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.ShowTabs }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) SqueezeBlank() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.SqueezeBlank }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) T() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.T }).(pulumi.BoolPtrOutput)
}

func (o CatArgsTypeOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatArgsType) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type ChmodArgsType struct {
	Changes        *bool    `pulumi:"changes"`
	Files          []string `pulumi:"files"`
	Help           *bool    `pulumi:"help"`
	Mode           []string `pulumi:"mode"`
	NoPreserveRoot *bool    `pulumi:"noPreserveRoot"`
	OctalMode      *string  `pulumi:"octalMode"`
	PreserveRoot   *bool    `pulumi:"preserveRoot"`
	Quiet          *bool    `pulumi:"quiet"`
	Recursive      *bool    `pulumi:"recursive"`
	Reference      *string  `pulumi:"reference"`
	Verbose        *bool    `pulumi:"verbose"`
	Version        *bool    `pulumi:"version"`
}

// ChmodArgsTypeInput is an input type that accepts ChmodArgsTypeArgs and ChmodArgsTypeOutput values.
// You can construct a concrete instance of `ChmodArgsTypeInput` via:
//
//	ChmodArgsTypeArgs{...}
type ChmodArgsTypeInput interface {
	pulumi.Input

	ToChmodArgsTypeOutput() ChmodArgsTypeOutput
	ToChmodArgsTypeOutputWithContext(context.Context) ChmodArgsTypeOutput
}

type ChmodArgsTypeArgs struct {
	Changes        pulumi.BoolPtrInput     `pulumi:"changes"`
	Files          pulumi.StringArrayInput `pulumi:"files"`
	Help           pulumi.BoolPtrInput     `pulumi:"help"`
	Mode           pulumi.StringArrayInput `pulumi:"mode"`
	NoPreserveRoot pulumi.BoolPtrInput     `pulumi:"noPreserveRoot"`
	OctalMode      pulumi.StringPtrInput   `pulumi:"octalMode"`
	PreserveRoot   pulumi.BoolPtrInput     `pulumi:"preserveRoot"`
	Quiet          pulumi.BoolPtrInput     `pulumi:"quiet"`
	Recursive      pulumi.BoolPtrInput     `pulumi:"recursive"`
	Reference      pulumi.StringPtrInput   `pulumi:"reference"`
	Verbose        pulumi.BoolPtrInput     `pulumi:"verbose"`
	Version        pulumi.BoolPtrInput     `pulumi:"version"`
}

func (ChmodArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChmodArgsType)(nil)).Elem()
}

func (i ChmodArgsTypeArgs) ToChmodArgsTypeOutput() ChmodArgsTypeOutput {
	return i.ToChmodArgsTypeOutputWithContext(context.Background())
}

func (i ChmodArgsTypeArgs) ToChmodArgsTypeOutputWithContext(ctx context.Context) ChmodArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChmodArgsTypeOutput)
}

func (i ChmodArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ChmodArgsType] {
	return pulumix.Output[ChmodArgsType]{
		OutputState: i.ToChmodArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type ChmodArgsTypeOutput struct{ *pulumi.OutputState }

func (ChmodArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChmodArgsType)(nil)).Elem()
}

func (o ChmodArgsTypeOutput) ToChmodArgsTypeOutput() ChmodArgsTypeOutput {
	return o
}

func (o ChmodArgsTypeOutput) ToChmodArgsTypeOutputWithContext(ctx context.Context) ChmodArgsTypeOutput {
	return o
}

func (o ChmodArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ChmodArgsType] {
	return pulumix.Output[ChmodArgsType]{
		OutputState: o.OutputState,
	}
}

func (o ChmodArgsTypeOutput) Changes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.Changes }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChmodArgsType) []string { return v.Files }).(pulumi.StringArrayOutput)
}

func (o ChmodArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) Mode() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChmodArgsType) []string { return v.Mode }).(pulumi.StringArrayOutput)
}

func (o ChmodArgsTypeOutput) NoPreserveRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.NoPreserveRoot }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) OctalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *string { return v.OctalMode }).(pulumi.StringPtrOutput)
}

func (o ChmodArgsTypeOutput) PreserveRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.PreserveRoot }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.Recursive }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

func (o ChmodArgsTypeOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

func (o ChmodArgsTypeOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodArgsType) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type MkdirArgsType struct {
	Directory []string `pulumi:"directory"`
	Help      *bool    `pulumi:"help"`
	Mode      *string  `pulumi:"mode"`
	Parents   *bool    `pulumi:"parents"`
	Verbose   *bool    `pulumi:"verbose"`
	Version   *bool    `pulumi:"version"`
}

// MkdirArgsTypeInput is an input type that accepts MkdirArgsTypeArgs and MkdirArgsTypeOutput values.
// You can construct a concrete instance of `MkdirArgsTypeInput` via:
//
//	MkdirArgsTypeArgs{...}
type MkdirArgsTypeInput interface {
	pulumi.Input

	ToMkdirArgsTypeOutput() MkdirArgsTypeOutput
	ToMkdirArgsTypeOutputWithContext(context.Context) MkdirArgsTypeOutput
}

type MkdirArgsTypeArgs struct {
	Directory pulumi.StringArrayInput `pulumi:"directory"`
	Help      pulumi.BoolPtrInput     `pulumi:"help"`
	Mode      pulumi.StringPtrInput   `pulumi:"mode"`
	Parents   pulumi.BoolPtrInput     `pulumi:"parents"`
	Verbose   pulumi.BoolPtrInput     `pulumi:"verbose"`
	Version   pulumi.BoolPtrInput     `pulumi:"version"`
}

func (MkdirArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MkdirArgsType)(nil)).Elem()
}

func (i MkdirArgsTypeArgs) ToMkdirArgsTypeOutput() MkdirArgsTypeOutput {
	return i.ToMkdirArgsTypeOutputWithContext(context.Background())
}

func (i MkdirArgsTypeArgs) ToMkdirArgsTypeOutputWithContext(ctx context.Context) MkdirArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirArgsTypeOutput)
}

func (i MkdirArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[MkdirArgsType] {
	return pulumix.Output[MkdirArgsType]{
		OutputState: i.ToMkdirArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type MkdirArgsTypeOutput struct{ *pulumi.OutputState }

func (MkdirArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MkdirArgsType)(nil)).Elem()
}

func (o MkdirArgsTypeOutput) ToMkdirArgsTypeOutput() MkdirArgsTypeOutput {
	return o
}

func (o MkdirArgsTypeOutput) ToMkdirArgsTypeOutputWithContext(ctx context.Context) MkdirArgsTypeOutput {
	return o
}

func (o MkdirArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MkdirArgsType] {
	return pulumix.Output[MkdirArgsType]{
		OutputState: o.OutputState,
	}
}

func (o MkdirArgsTypeOutput) Directory() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MkdirArgsType) []string { return v.Directory }).(pulumi.StringArrayOutput)
}

func (o MkdirArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MkdirArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o MkdirArgsTypeOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MkdirArgsType) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o MkdirArgsTypeOutput) Parents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MkdirArgsType) *bool { return v.Parents }).(pulumi.BoolPtrOutput)
}

func (o MkdirArgsTypeOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MkdirArgsType) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

func (o MkdirArgsTypeOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MkdirArgsType) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type MktempArgsType struct {
	Directory *bool   `pulumi:"directory"`
	DryRun    *bool   `pulumi:"dryRun"`
	Help      *bool   `pulumi:"help"`
	P         *string `pulumi:"p"`
	Quiet     *bool   `pulumi:"quiet"`
	Suffix    *string `pulumi:"suffix"`
	T         *bool   `pulumi:"t"`
	Template  *string `pulumi:"template"`
	Tmpdir    *bool   `pulumi:"tmpdir"`
	Version   *bool   `pulumi:"version"`
}

// MktempArgsTypeInput is an input type that accepts MktempArgsTypeArgs and MktempArgsTypeOutput values.
// You can construct a concrete instance of `MktempArgsTypeInput` via:
//
//	MktempArgsTypeArgs{...}
type MktempArgsTypeInput interface {
	pulumi.Input

	ToMktempArgsTypeOutput() MktempArgsTypeOutput
	ToMktempArgsTypeOutputWithContext(context.Context) MktempArgsTypeOutput
}

type MktempArgsTypeArgs struct {
	Directory pulumi.BoolPtrInput   `pulumi:"directory"`
	DryRun    pulumi.BoolPtrInput   `pulumi:"dryRun"`
	Help      pulumi.BoolPtrInput   `pulumi:"help"`
	P         pulumi.StringPtrInput `pulumi:"p"`
	Quiet     pulumi.BoolPtrInput   `pulumi:"quiet"`
	Suffix    pulumi.StringPtrInput `pulumi:"suffix"`
	T         pulumi.BoolPtrInput   `pulumi:"t"`
	Template  pulumi.StringPtrInput `pulumi:"template"`
	Tmpdir    pulumi.BoolPtrInput   `pulumi:"tmpdir"`
	Version   pulumi.BoolPtrInput   `pulumi:"version"`
}

func (MktempArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MktempArgsType)(nil)).Elem()
}

func (i MktempArgsTypeArgs) ToMktempArgsTypeOutput() MktempArgsTypeOutput {
	return i.ToMktempArgsTypeOutputWithContext(context.Background())
}

func (i MktempArgsTypeArgs) ToMktempArgsTypeOutputWithContext(ctx context.Context) MktempArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MktempArgsTypeOutput)
}

func (i MktempArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[MktempArgsType] {
	return pulumix.Output[MktempArgsType]{
		OutputState: i.ToMktempArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type MktempArgsTypeOutput struct{ *pulumi.OutputState }

func (MktempArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MktempArgsType)(nil)).Elem()
}

func (o MktempArgsTypeOutput) ToMktempArgsTypeOutput() MktempArgsTypeOutput {
	return o
}

func (o MktempArgsTypeOutput) ToMktempArgsTypeOutputWithContext(ctx context.Context) MktempArgsTypeOutput {
	return o
}

func (o MktempArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MktempArgsType] {
	return pulumix.Output[MktempArgsType]{
		OutputState: o.OutputState,
	}
}

func (o MktempArgsTypeOutput) Directory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.Directory }).(pulumi.BoolPtrOutput)
}

func (o MktempArgsTypeOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

func (o MktempArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o MktempArgsTypeOutput) P() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *string { return v.P }).(pulumi.StringPtrOutput)
}

func (o MktempArgsTypeOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

func (o MktempArgsTypeOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

func (o MktempArgsTypeOutput) T() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.T }).(pulumi.BoolPtrOutput)
}

func (o MktempArgsTypeOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *string { return v.Template }).(pulumi.StringPtrOutput)
}

func (o MktempArgsTypeOutput) Tmpdir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.Tmpdir }).(pulumi.BoolPtrOutput)
}

func (o MktempArgsTypeOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempArgsType) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type MvArgsType struct {
	Backup               *string  `pulumi:"backup"`
	Destination          *string  `pulumi:"destination"`
	Directory            *string  `pulumi:"directory"`
	Force                *bool    `pulumi:"force"`
	Help                 *bool    `pulumi:"help"`
	NoClobber            *bool    `pulumi:"noClobber"`
	NoTargetDirectory    *bool    `pulumi:"noTargetDirectory"`
	Source               []string `pulumi:"source"`
	StripTrailingSlashes *bool    `pulumi:"stripTrailingSlashes"`
	Suffix               *string  `pulumi:"suffix"`
	TargetDirectory      *string  `pulumi:"targetDirectory"`
	Update               *bool    `pulumi:"update"`
	Verbose              *bool    `pulumi:"verbose"`
	Version              *bool    `pulumi:"version"`
}

// MvArgsTypeInput is an input type that accepts MvArgsTypeArgs and MvArgsTypeOutput values.
// You can construct a concrete instance of `MvArgsTypeInput` via:
//
//	MvArgsTypeArgs{...}
type MvArgsTypeInput interface {
	pulumi.Input

	ToMvArgsTypeOutput() MvArgsTypeOutput
	ToMvArgsTypeOutputWithContext(context.Context) MvArgsTypeOutput
}

type MvArgsTypeArgs struct {
	Backup               pulumi.StringPtrInput   `pulumi:"backup"`
	Destination          pulumi.StringPtrInput   `pulumi:"destination"`
	Directory            pulumi.StringPtrInput   `pulumi:"directory"`
	Force                pulumi.BoolPtrInput     `pulumi:"force"`
	Help                 pulumi.BoolPtrInput     `pulumi:"help"`
	NoClobber            pulumi.BoolPtrInput     `pulumi:"noClobber"`
	NoTargetDirectory    pulumi.BoolPtrInput     `pulumi:"noTargetDirectory"`
	Source               pulumi.StringArrayInput `pulumi:"source"`
	StripTrailingSlashes pulumi.BoolPtrInput     `pulumi:"stripTrailingSlashes"`
	Suffix               pulumi.StringPtrInput   `pulumi:"suffix"`
	TargetDirectory      pulumi.StringPtrInput   `pulumi:"targetDirectory"`
	Update               pulumi.BoolPtrInput     `pulumi:"update"`
	Verbose              pulumi.BoolPtrInput     `pulumi:"verbose"`
	Version              pulumi.BoolPtrInput     `pulumi:"version"`
}

func (MvArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MvArgsType)(nil)).Elem()
}

func (i MvArgsTypeArgs) ToMvArgsTypeOutput() MvArgsTypeOutput {
	return i.ToMvArgsTypeOutputWithContext(context.Background())
}

func (i MvArgsTypeArgs) ToMvArgsTypeOutputWithContext(ctx context.Context) MvArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MvArgsTypeOutput)
}

func (i MvArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[MvArgsType] {
	return pulumix.Output[MvArgsType]{
		OutputState: i.ToMvArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type MvArgsTypeOutput struct{ *pulumi.OutputState }

func (MvArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MvArgsType)(nil)).Elem()
}

func (o MvArgsTypeOutput) ToMvArgsTypeOutput() MvArgsTypeOutput {
	return o
}

func (o MvArgsTypeOutput) ToMvArgsTypeOutputWithContext(ctx context.Context) MvArgsTypeOutput {
	return o
}

func (o MvArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MvArgsType] {
	return pulumix.Output[MvArgsType]{
		OutputState: o.OutputState,
	}
}

func (o MvArgsTypeOutput) Backup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvArgsType) *string { return v.Backup }).(pulumi.StringPtrOutput)
}

func (o MvArgsTypeOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvArgsType) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o MvArgsTypeOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvArgsType) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

func (o MvArgsTypeOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) NoClobber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.NoClobber }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) NoTargetDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.NoTargetDirectory }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) Source() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MvArgsType) []string { return v.Source }).(pulumi.StringArrayOutput)
}

func (o MvArgsTypeOutput) StripTrailingSlashes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.StripTrailingSlashes }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvArgsType) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

func (o MvArgsTypeOutput) TargetDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvArgsType) *string { return v.TargetDirectory }).(pulumi.StringPtrOutput)
}

func (o MvArgsTypeOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.Update }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

func (o MvArgsTypeOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvArgsType) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type RmArgsType struct {
	Dir           *bool    `pulumi:"dir"`
	Files         []string `pulumi:"files"`
	Force         *bool    `pulumi:"force"`
	Help          *bool    `pulumi:"help"`
	OneFileSystem *bool    `pulumi:"oneFileSystem"`
	Recursive     *bool    `pulumi:"recursive"`
	Verbose       *bool    `pulumi:"verbose"`
}

// RmArgsTypeInput is an input type that accepts RmArgsTypeArgs and RmArgsTypeOutput values.
// You can construct a concrete instance of `RmArgsTypeInput` via:
//
//	RmArgsTypeArgs{...}
type RmArgsTypeInput interface {
	pulumi.Input

	ToRmArgsTypeOutput() RmArgsTypeOutput
	ToRmArgsTypeOutputWithContext(context.Context) RmArgsTypeOutput
}

type RmArgsTypeArgs struct {
	Dir           pulumi.BoolPtrInput     `pulumi:"dir"`
	Files         pulumi.StringArrayInput `pulumi:"files"`
	Force         pulumi.BoolPtrInput     `pulumi:"force"`
	Help          pulumi.BoolPtrInput     `pulumi:"help"`
	OneFileSystem pulumi.BoolPtrInput     `pulumi:"oneFileSystem"`
	Recursive     pulumi.BoolPtrInput     `pulumi:"recursive"`
	Verbose       pulumi.BoolPtrInput     `pulumi:"verbose"`
}

func (RmArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RmArgsType)(nil)).Elem()
}

func (i RmArgsTypeArgs) ToRmArgsTypeOutput() RmArgsTypeOutput {
	return i.ToRmArgsTypeOutputWithContext(context.Background())
}

func (i RmArgsTypeArgs) ToRmArgsTypeOutputWithContext(ctx context.Context) RmArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmArgsTypeOutput)
}

func (i RmArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[RmArgsType] {
	return pulumix.Output[RmArgsType]{
		OutputState: i.ToRmArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type RmArgsTypeOutput struct{ *pulumi.OutputState }

func (RmArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RmArgsType)(nil)).Elem()
}

func (o RmArgsTypeOutput) ToRmArgsTypeOutput() RmArgsTypeOutput {
	return o
}

func (o RmArgsTypeOutput) ToRmArgsTypeOutputWithContext(ctx context.Context) RmArgsTypeOutput {
	return o
}

func (o RmArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RmArgsType] {
	return pulumix.Output[RmArgsType]{
		OutputState: o.OutputState,
	}
}

func (o RmArgsTypeOutput) Dir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmArgsType) *bool { return v.Dir }).(pulumi.BoolPtrOutput)
}

func (o RmArgsTypeOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RmArgsType) []string { return v.Files }).(pulumi.StringArrayOutput)
}

func (o RmArgsTypeOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmArgsType) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o RmArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o RmArgsTypeOutput) OneFileSystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmArgsType) *bool { return v.OneFileSystem }).(pulumi.BoolPtrOutput)
}

func (o RmArgsTypeOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmArgsType) *bool { return v.Recursive }).(pulumi.BoolPtrOutput)
}

func (o RmArgsTypeOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmArgsType) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

type TarArgsType struct {
	Anchored             *bool    `pulumi:"anchored"`
	Append               *bool    `pulumi:"append"`
	Args                 []string `pulumi:"args"`
	Bzip2                *bool    `pulumi:"bzip2"`
	Create               *bool    `pulumi:"create"`
	Delete               *bool    `pulumi:"delete"`
	Diff                 *bool    `pulumi:"diff"`
	Directory            *string  `pulumi:"directory"`
	Exclude              *string  `pulumi:"exclude"`
	ExcludeFrom          *string  `pulumi:"excludeFrom"`
	ExcludeVcs           *bool    `pulumi:"excludeVcs"`
	ExcludeVcsIgnores    *bool    `pulumi:"excludeVcsIgnores"`
	Extract              *bool    `pulumi:"extract"`
	File                 *string  `pulumi:"file"`
	Gzip                 *bool    `pulumi:"gzip"`
	IgnoreCommandError   *bool    `pulumi:"ignoreCommandError"`
	KeepDirectorySymlink *bool    `pulumi:"keepDirectorySymlink"`
	KeepNewerFiles       *bool    `pulumi:"keepNewerFiles"`
	KeepOldfiles         *bool    `pulumi:"keepOldfiles"`
	List                 *bool    `pulumi:"list"`
	Lzip                 *bool    `pulumi:"lzip"`
	Lzma                 *bool    `pulumi:"lzma"`
	Lzop                 *bool    `pulumi:"lzop"`
	NoAnchored           *bool    `pulumi:"noAnchored"`
	NoOverwriteDir       *bool    `pulumi:"noOverwriteDir"`
	NoSeek               *bool    `pulumi:"noSeek"`
	Overwrite            *bool    `pulumi:"overwrite"`
	OverwriteDir         *bool    `pulumi:"overwriteDir"`
	RemoveFiles          *bool    `pulumi:"removeFiles"`
	SkipOldFiles         *bool    `pulumi:"skipOldFiles"`
	Sparse               *bool    `pulumi:"sparse"`
	StripComponents      *int     `pulumi:"stripComponents"`
	Suffix               *string  `pulumi:"suffix"`
	ToStdout             *bool    `pulumi:"toStdout"`
	Transform            *string  `pulumi:"transform"`
	UnlinkFirst          *bool    `pulumi:"unlinkFirst"`
	Update               *bool    `pulumi:"update"`
	Verbose              *bool    `pulumi:"verbose"`
	Verify               *bool    `pulumi:"verify"`
	Version              *bool    `pulumi:"version"`
	Xz                   *bool    `pulumi:"xz"`
	Zstd                 *bool    `pulumi:"zstd"`
}

// TarArgsTypeInput is an input type that accepts TarArgsTypeArgs and TarArgsTypeOutput values.
// You can construct a concrete instance of `TarArgsTypeInput` via:
//
//	TarArgsTypeArgs{...}
type TarArgsTypeInput interface {
	pulumi.Input

	ToTarArgsTypeOutput() TarArgsTypeOutput
	ToTarArgsTypeOutputWithContext(context.Context) TarArgsTypeOutput
}

type TarArgsTypeArgs struct {
	Anchored             pulumi.BoolPtrInput     `pulumi:"anchored"`
	Append               pulumi.BoolPtrInput     `pulumi:"append"`
	Args                 pulumi.StringArrayInput `pulumi:"args"`
	Bzip2                pulumi.BoolPtrInput     `pulumi:"bzip2"`
	Create               pulumi.BoolPtrInput     `pulumi:"create"`
	Delete               pulumi.BoolPtrInput     `pulumi:"delete"`
	Diff                 pulumi.BoolPtrInput     `pulumi:"diff"`
	Directory            pulumi.StringPtrInput   `pulumi:"directory"`
	Exclude              pulumi.StringPtrInput   `pulumi:"exclude"`
	ExcludeFrom          pulumi.StringPtrInput   `pulumi:"excludeFrom"`
	ExcludeVcs           pulumi.BoolPtrInput     `pulumi:"excludeVcs"`
	ExcludeVcsIgnores    pulumi.BoolPtrInput     `pulumi:"excludeVcsIgnores"`
	Extract              pulumi.BoolPtrInput     `pulumi:"extract"`
	File                 pulumi.StringPtrInput   `pulumi:"file"`
	Gzip                 pulumi.BoolPtrInput     `pulumi:"gzip"`
	IgnoreCommandError   pulumi.BoolPtrInput     `pulumi:"ignoreCommandError"`
	KeepDirectorySymlink pulumi.BoolPtrInput     `pulumi:"keepDirectorySymlink"`
	KeepNewerFiles       pulumi.BoolPtrInput     `pulumi:"keepNewerFiles"`
	KeepOldfiles         pulumi.BoolPtrInput     `pulumi:"keepOldfiles"`
	List                 pulumi.BoolPtrInput     `pulumi:"list"`
	Lzip                 pulumi.BoolPtrInput     `pulumi:"lzip"`
	Lzma                 pulumi.BoolPtrInput     `pulumi:"lzma"`
	Lzop                 pulumi.BoolPtrInput     `pulumi:"lzop"`
	NoAnchored           pulumi.BoolPtrInput     `pulumi:"noAnchored"`
	NoOverwriteDir       pulumi.BoolPtrInput     `pulumi:"noOverwriteDir"`
	NoSeek               pulumi.BoolPtrInput     `pulumi:"noSeek"`
	Overwrite            pulumi.BoolPtrInput     `pulumi:"overwrite"`
	OverwriteDir         pulumi.BoolPtrInput     `pulumi:"overwriteDir"`
	RemoveFiles          pulumi.BoolPtrInput     `pulumi:"removeFiles"`
	SkipOldFiles         pulumi.BoolPtrInput     `pulumi:"skipOldFiles"`
	Sparse               pulumi.BoolPtrInput     `pulumi:"sparse"`
	StripComponents      pulumi.IntPtrInput      `pulumi:"stripComponents"`
	Suffix               pulumi.StringPtrInput   `pulumi:"suffix"`
	ToStdout             pulumi.BoolPtrInput     `pulumi:"toStdout"`
	Transform            pulumi.StringPtrInput   `pulumi:"transform"`
	UnlinkFirst          pulumi.BoolPtrInput     `pulumi:"unlinkFirst"`
	Update               pulumi.BoolPtrInput     `pulumi:"update"`
	Verbose              pulumi.BoolPtrInput     `pulumi:"verbose"`
	Verify               pulumi.BoolPtrInput     `pulumi:"verify"`
	Version              pulumi.BoolPtrInput     `pulumi:"version"`
	Xz                   pulumi.BoolPtrInput     `pulumi:"xz"`
	Zstd                 pulumi.BoolPtrInput     `pulumi:"zstd"`
}

func (TarArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TarArgsType)(nil)).Elem()
}

func (i TarArgsTypeArgs) ToTarArgsTypeOutput() TarArgsTypeOutput {
	return i.ToTarArgsTypeOutputWithContext(context.Background())
}

func (i TarArgsTypeArgs) ToTarArgsTypeOutputWithContext(ctx context.Context) TarArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarArgsTypeOutput)
}

func (i TarArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TarArgsType] {
	return pulumix.Output[TarArgsType]{
		OutputState: i.ToTarArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type TarArgsTypeOutput struct{ *pulumi.OutputState }

func (TarArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarArgsType)(nil)).Elem()
}

func (o TarArgsTypeOutput) ToTarArgsTypeOutput() TarArgsTypeOutput {
	return o
}

func (o TarArgsTypeOutput) ToTarArgsTypeOutputWithContext(ctx context.Context) TarArgsTypeOutput {
	return o
}

func (o TarArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TarArgsType] {
	return pulumix.Output[TarArgsType]{
		OutputState: o.OutputState,
	}
}

func (o TarArgsTypeOutput) Anchored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Anchored }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Append }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TarArgsType) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o TarArgsTypeOutput) Bzip2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Bzip2 }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Create }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Delete }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Diff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Diff }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarArgsType) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

func (o TarArgsTypeOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarArgsType) *string { return v.Exclude }).(pulumi.StringPtrOutput)
}

func (o TarArgsTypeOutput) ExcludeFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarArgsType) *string { return v.ExcludeFrom }).(pulumi.StringPtrOutput)
}

func (o TarArgsTypeOutput) ExcludeVcs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.ExcludeVcs }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) ExcludeVcsIgnores() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.ExcludeVcsIgnores }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Extract() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Extract }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarArgsType) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o TarArgsTypeOutput) Gzip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Gzip }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) IgnoreCommandError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.IgnoreCommandError }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) KeepDirectorySymlink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.KeepDirectorySymlink }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) KeepNewerFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.KeepNewerFiles }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) KeepOldfiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.KeepOldfiles }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) List() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.List }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Lzip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Lzip }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Lzma() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Lzma }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Lzop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Lzop }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) NoAnchored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.NoAnchored }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) NoOverwriteDir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.NoOverwriteDir }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) NoSeek() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.NoSeek }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) OverwriteDir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.OverwriteDir }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) RemoveFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.RemoveFiles }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) SkipOldFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.SkipOldFiles }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Sparse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Sparse }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) StripComponents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TarArgsType) *int { return v.StripComponents }).(pulumi.IntPtrOutput)
}

func (o TarArgsTypeOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarArgsType) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

func (o TarArgsTypeOutput) ToStdout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.ToStdout }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Transform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarArgsType) *string { return v.Transform }).(pulumi.StringPtrOutput)
}

func (o TarArgsTypeOutput) UnlinkFirst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.UnlinkFirst }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Update }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Xz() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Xz }).(pulumi.BoolPtrOutput)
}

func (o TarArgsTypeOutput) Zstd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarArgsType) *bool { return v.Zstd }).(pulumi.BoolPtrOutput)
}

type TeeArgsType struct {
	Append *bool    `pulumi:"append"`
	Files  []string `pulumi:"files"`
	Stdin  *string  `pulumi:"stdin"`
}

// TeeArgsTypeInput is an input type that accepts TeeArgsTypeArgs and TeeArgsTypeOutput values.
// You can construct a concrete instance of `TeeArgsTypeInput` via:
//
//	TeeArgsTypeArgs{...}
type TeeArgsTypeInput interface {
	pulumi.Input

	ToTeeArgsTypeOutput() TeeArgsTypeOutput
	ToTeeArgsTypeOutputWithContext(context.Context) TeeArgsTypeOutput
}

type TeeArgsTypeArgs struct {
	Append pulumi.BoolPtrInput     `pulumi:"append"`
	Files  pulumi.StringArrayInput `pulumi:"files"`
	Stdin  pulumi.StringPtrInput   `pulumi:"stdin"`
}

func (TeeArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeArgsType)(nil)).Elem()
}

func (i TeeArgsTypeArgs) ToTeeArgsTypeOutput() TeeArgsTypeOutput {
	return i.ToTeeArgsTypeOutputWithContext(context.Background())
}

func (i TeeArgsTypeArgs) ToTeeArgsTypeOutputWithContext(ctx context.Context) TeeArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeeArgsTypeOutput)
}

func (i TeeArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TeeArgsType] {
	return pulumix.Output[TeeArgsType]{
		OutputState: i.ToTeeArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type TeeArgsTypeOutput struct{ *pulumi.OutputState }

func (TeeArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeArgsType)(nil)).Elem()
}

func (o TeeArgsTypeOutput) ToTeeArgsTypeOutput() TeeArgsTypeOutput {
	return o
}

func (o TeeArgsTypeOutput) ToTeeArgsTypeOutputWithContext(ctx context.Context) TeeArgsTypeOutput {
	return o
}

func (o TeeArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TeeArgsType] {
	return pulumix.Output[TeeArgsType]{
		OutputState: o.OutputState,
	}
}

func (o TeeArgsTypeOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeeArgsType) *bool { return v.Append }).(pulumi.BoolPtrOutput)
}

func (o TeeArgsTypeOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeeArgsType) []string { return v.Files }).(pulumi.StringArrayOutput)
}

func (o TeeArgsTypeOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeeArgsType) *string { return v.Stdin }).(pulumi.StringPtrOutput)
}

type WgetArgsType struct {
	AppendOutput       *string  `pulumi:"appendOutput"`
	Background         *bool    `pulumi:"background"`
	Base               *string  `pulumi:"base"`
	CaCertificateFile  *string  `pulumi:"caCertificateFile"`
	CaDirectory        *string  `pulumi:"caDirectory"`
	Certificate        *string  `pulumi:"certificate"`
	CertificateType    *string  `pulumi:"certificateType"`
	Config             *string  `pulumi:"config"`
	Continue           *bool    `pulumi:"continue"`
	CrlFile            *string  `pulumi:"crlFile"`
	CutDirs            *int     `pulumi:"cutDirs"`
	Debug              *bool    `pulumi:"debug"`
	DirectoryPrefix    *string  `pulumi:"directoryPrefix"`
	Execute            []string `pulumi:"execute"`
	ForceDirectories   *bool    `pulumi:"forceDirectories"`
	ForceHtml          *bool    `pulumi:"forceHtml"`
	Help               *bool    `pulumi:"help"`
	HttpsOnly          *bool    `pulumi:"httpsOnly"`
	Inet4Only          *bool    `pulumi:"inet4Only"`
	InputFile          *string  `pulumi:"inputFile"`
	KeepSessionCookies *bool    `pulumi:"keepSessionCookies"`
	NoClobber          *bool    `pulumi:"noClobber"`
	NoDirectories      *bool    `pulumi:"noDirectories"`
	NoDnsCache         *bool    `pulumi:"noDnsCache"`
	NoVerbose          *bool    `pulumi:"noVerbose"`
	OutputDocument     *string  `pulumi:"outputDocument"`
	OutputFile         *string  `pulumi:"outputFile"`
	Password           *string  `pulumi:"password"`
	PrivateKey         *string  `pulumi:"privateKey"`
	PrivateKeyType     *string  `pulumi:"privateKeyType"`
	Progress           *string  `pulumi:"progress"`
	Quiet              *bool    `pulumi:"quiet"`
	RandomWait         *bool    `pulumi:"randomWait"`
	ReportSpeed        *string  `pulumi:"reportSpeed"`
	SaveCookies        *string  `pulumi:"saveCookies"`
	ShowProgress       *bool    `pulumi:"showProgress"`
	StartPos           *string  `pulumi:"startPos"`
	Timeout            *string  `pulumi:"timeout"`
	Timestamping       *bool    `pulumi:"timestamping"`
	Tries              *int     `pulumi:"tries"`
	Urls               []string `pulumi:"urls"`
	User               *string  `pulumi:"user"`
	UserAgent          *string  `pulumi:"userAgent"`
	Verbose            *bool    `pulumi:"verbose"`
	Version            *string  `pulumi:"version"`
	Wait               *string  `pulumi:"wait"`
}

// WgetArgsTypeInput is an input type that accepts WgetArgsTypeArgs and WgetArgsTypeOutput values.
// You can construct a concrete instance of `WgetArgsTypeInput` via:
//
//	WgetArgsTypeArgs{...}
type WgetArgsTypeInput interface {
	pulumi.Input

	ToWgetArgsTypeOutput() WgetArgsTypeOutput
	ToWgetArgsTypeOutputWithContext(context.Context) WgetArgsTypeOutput
}

type WgetArgsTypeArgs struct {
	AppendOutput       pulumi.StringPtrInput   `pulumi:"appendOutput"`
	Background         pulumi.BoolPtrInput     `pulumi:"background"`
	Base               pulumi.StringPtrInput   `pulumi:"base"`
	CaCertificateFile  pulumi.StringPtrInput   `pulumi:"caCertificateFile"`
	CaDirectory        pulumi.StringPtrInput   `pulumi:"caDirectory"`
	Certificate        pulumi.StringPtrInput   `pulumi:"certificate"`
	CertificateType    pulumi.StringPtrInput   `pulumi:"certificateType"`
	Config             pulumi.StringPtrInput   `pulumi:"config"`
	Continue           pulumi.BoolPtrInput     `pulumi:"continue"`
	CrlFile            pulumi.StringPtrInput   `pulumi:"crlFile"`
	CutDirs            pulumi.IntPtrInput      `pulumi:"cutDirs"`
	Debug              pulumi.BoolPtrInput     `pulumi:"debug"`
	DirectoryPrefix    pulumi.StringPtrInput   `pulumi:"directoryPrefix"`
	Execute            pulumi.StringArrayInput `pulumi:"execute"`
	ForceDirectories   pulumi.BoolPtrInput     `pulumi:"forceDirectories"`
	ForceHtml          pulumi.BoolPtrInput     `pulumi:"forceHtml"`
	Help               pulumi.BoolPtrInput     `pulumi:"help"`
	HttpsOnly          pulumi.BoolPtrInput     `pulumi:"httpsOnly"`
	Inet4Only          pulumi.BoolPtrInput     `pulumi:"inet4Only"`
	InputFile          pulumi.StringPtrInput   `pulumi:"inputFile"`
	KeepSessionCookies pulumi.BoolPtrInput     `pulumi:"keepSessionCookies"`
	NoClobber          pulumi.BoolPtrInput     `pulumi:"noClobber"`
	NoDirectories      pulumi.BoolPtrInput     `pulumi:"noDirectories"`
	NoDnsCache         pulumi.BoolPtrInput     `pulumi:"noDnsCache"`
	NoVerbose          pulumi.BoolPtrInput     `pulumi:"noVerbose"`
	OutputDocument     pulumi.StringPtrInput   `pulumi:"outputDocument"`
	OutputFile         pulumi.StringPtrInput   `pulumi:"outputFile"`
	Password           pulumi.StringPtrInput   `pulumi:"password"`
	PrivateKey         pulumi.StringPtrInput   `pulumi:"privateKey"`
	PrivateKeyType     pulumi.StringPtrInput   `pulumi:"privateKeyType"`
	Progress           pulumi.StringPtrInput   `pulumi:"progress"`
	Quiet              pulumi.BoolPtrInput     `pulumi:"quiet"`
	RandomWait         pulumi.BoolPtrInput     `pulumi:"randomWait"`
	ReportSpeed        pulumi.StringPtrInput   `pulumi:"reportSpeed"`
	SaveCookies        pulumi.StringPtrInput   `pulumi:"saveCookies"`
	ShowProgress       pulumi.BoolPtrInput     `pulumi:"showProgress"`
	StartPos           pulumi.StringPtrInput   `pulumi:"startPos"`
	Timeout            pulumi.StringPtrInput   `pulumi:"timeout"`
	Timestamping       pulumi.BoolPtrInput     `pulumi:"timestamping"`
	Tries              pulumi.IntPtrInput      `pulumi:"tries"`
	Urls               pulumi.StringArrayInput `pulumi:"urls"`
	User               pulumi.StringPtrInput   `pulumi:"user"`
	UserAgent          pulumi.StringPtrInput   `pulumi:"userAgent"`
	Verbose            pulumi.BoolPtrInput     `pulumi:"verbose"`
	Version            pulumi.StringPtrInput   `pulumi:"version"`
	Wait               pulumi.StringPtrInput   `pulumi:"wait"`
}

func (WgetArgsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WgetArgsType)(nil)).Elem()
}

func (i WgetArgsTypeArgs) ToWgetArgsTypeOutput() WgetArgsTypeOutput {
	return i.ToWgetArgsTypeOutputWithContext(context.Background())
}

func (i WgetArgsTypeArgs) ToWgetArgsTypeOutputWithContext(ctx context.Context) WgetArgsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetArgsTypeOutput)
}

func (i WgetArgsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[WgetArgsType] {
	return pulumix.Output[WgetArgsType]{
		OutputState: i.ToWgetArgsTypeOutputWithContext(ctx).OutputState,
	}
}

type WgetArgsTypeOutput struct{ *pulumi.OutputState }

func (WgetArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WgetArgsType)(nil)).Elem()
}

func (o WgetArgsTypeOutput) ToWgetArgsTypeOutput() WgetArgsTypeOutput {
	return o
}

func (o WgetArgsTypeOutput) ToWgetArgsTypeOutputWithContext(ctx context.Context) WgetArgsTypeOutput {
	return o
}

func (o WgetArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[WgetArgsType] {
	return pulumix.Output[WgetArgsType]{
		OutputState: o.OutputState,
	}
}

func (o WgetArgsTypeOutput) AppendOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.AppendOutput }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Background() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Background }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) Base() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Base }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) CaCertificateFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.CaCertificateFile }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) CaDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.CaDirectory }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.CertificateType }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Config }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) CrlFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.CrlFile }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) CutDirs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *int { return v.CutDirs }).(pulumi.IntPtrOutput)
}

func (o WgetArgsTypeOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Debug }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) DirectoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.DirectoryPrefix }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Execute() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WgetArgsType) []string { return v.Execute }).(pulumi.StringArrayOutput)
}

func (o WgetArgsTypeOutput) ForceDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.ForceDirectories }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) ForceHtml() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.ForceHtml }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) Inet4Only() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Inet4Only }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) InputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.InputFile }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) KeepSessionCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.KeepSessionCookies }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) NoClobber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.NoClobber }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) NoDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.NoDirectories }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) NoDnsCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.NoDnsCache }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) NoVerbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.NoVerbose }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) OutputDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.OutputDocument }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) PrivateKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.PrivateKeyType }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Progress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Progress }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) RandomWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.RandomWait }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) ReportSpeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.ReportSpeed }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) SaveCookies() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.SaveCookies }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) ShowProgress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.ShowProgress }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) StartPos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.StartPos }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Timestamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Timestamping }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) Tries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *int { return v.Tries }).(pulumi.IntPtrOutput)
}

func (o WgetArgsTypeOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WgetArgsType) []string { return v.Urls }).(pulumi.StringArrayOutput)
}

func (o WgetArgsTypeOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.User }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.UserAgent }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

func (o WgetArgsTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func (o WgetArgsTypeOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetArgsType) *string { return v.Wait }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatArgsTypeInput)(nil)).Elem(), CatArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChmodArgsTypeInput)(nil)).Elem(), ChmodArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MkdirArgsTypeInput)(nil)).Elem(), MkdirArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MktempArgsTypeInput)(nil)).Elem(), MktempArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MvArgsTypeInput)(nil)).Elem(), MvArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RmArgsTypeInput)(nil)).Elem(), RmArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TarArgsTypeInput)(nil)).Elem(), TarArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeeArgsTypeInput)(nil)).Elem(), TeeArgsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WgetArgsTypeInput)(nil)).Elem(), WgetArgsTypeArgs{})
	pulumi.RegisterOutputType(CatArgsTypeOutput{})
	pulumi.RegisterOutputType(ChmodArgsTypeOutput{})
	pulumi.RegisterOutputType(MkdirArgsTypeOutput{})
	pulumi.RegisterOutputType(MktempArgsTypeOutput{})
	pulumi.RegisterOutputType(MvArgsTypeOutput{})
	pulumi.RegisterOutputType(RmArgsTypeOutput{})
	pulumi.RegisterOutputType(TarArgsTypeOutput{})
	pulumi.RegisterOutputType(TeeArgsTypeOutput{})
	pulumi.RegisterOutputType(WgetArgsTypeOutput{})
}
