// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package coreutils

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Cat struct {
	pulumi.CustomResourceState

	Args         CatArgsTypeOutput                        `pulumi:"args"`
	Connection   baremetal.ProvisionerConnectionPtrOutput `pulumi:"connection"`
	CreatedFiles pulumi.StringArrayOutput                 `pulumi:"createdFiles"`
	CustomDelete pulumi.StringArrayOutput                 `pulumi:"customDelete"`
	CustomUpdate pulumi.StringArrayOutput                 `pulumi:"customUpdate"`
	ExitCode     pulumi.IntOutput                         `pulumi:"exitCode"`
	MovedFiles   pulumi.StringMapOutput                   `pulumi:"movedFiles"`
	Stderr       pulumi.StringOutput                      `pulumi:"stderr"`
	Stdout       pulumi.StringOutput                      `pulumi:"stdout"`
	Triggers     pulumi.ArrayOutput                       `pulumi:"triggers"`
}

// NewCat registers a new resource with the given unique name, arguments, and options.
func NewCat(ctx *pulumi.Context,
	name string, args *CatArgs, opts ...pulumi.ResourceOption) (*Cat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Args == nil {
		return nil, errors.New("invalid value for required argument 'Args'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cat
	err := ctx.RegisterResource("baremetal:coreutils:Cat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCat gets an existing Cat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatState, opts ...pulumi.ResourceOption) (*Cat, error) {
	var resource Cat
	err := ctx.ReadResource("baremetal:coreutils:Cat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cat resources.
type catState struct {
}

type CatState struct {
}

func (CatState) ElementType() reflect.Type {
	return reflect.TypeOf((*catState)(nil)).Elem()
}

type catArgs struct {
	Args         CatArgsType                      `pulumi:"args"`
	Connection   *baremetal.ProvisionerConnection `pulumi:"connection"`
	CustomDelete []string                         `pulumi:"customDelete"`
	CustomUpdate []string                         `pulumi:"customUpdate"`
	Triggers     []interface{}                    `pulumi:"triggers"`
}

// The set of arguments for constructing a Cat resource.
type CatArgs struct {
	Args         CatArgsTypeInput
	Connection   baremetal.ProvisionerConnectionPtrInput
	CustomDelete pulumi.StringArrayInput
	CustomUpdate pulumi.StringArrayInput
	Triggers     pulumi.ArrayInput
}

func (CatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catArgs)(nil)).Elem()
}

type CatInput interface {
	pulumi.Input

	ToCatOutput() CatOutput
	ToCatOutputWithContext(ctx context.Context) CatOutput
}

func (*Cat) ElementType() reflect.Type {
	return reflect.TypeOf((**Cat)(nil)).Elem()
}

func (i *Cat) ToCatOutput() CatOutput {
	return i.ToCatOutputWithContext(context.Background())
}

func (i *Cat) ToCatOutputWithContext(ctx context.Context) CatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatOutput)
}

func (i *Cat) ToOutput(ctx context.Context) pulumix.Output[*Cat] {
	return pulumix.Output[*Cat]{
		OutputState: i.ToCatOutputWithContext(ctx).OutputState,
	}
}

type CatOutput struct{ *pulumi.OutputState }

func (CatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cat)(nil)).Elem()
}

func (o CatOutput) ToCatOutput() CatOutput {
	return o
}

func (o CatOutput) ToCatOutputWithContext(ctx context.Context) CatOutput {
	return o
}

func (o CatOutput) ToOutput(ctx context.Context) pulumix.Output[*Cat] {
	return pulumix.Output[*Cat]{
		OutputState: o.OutputState,
	}
}

func (o CatOutput) Args() CatArgsTypeOutput {
	return o.ApplyT(func(v *Cat) CatArgsTypeOutput { return v.Args }).(CatArgsTypeOutput)
}

func (o CatOutput) Connection() baremetal.ProvisionerConnectionPtrOutput {
	return o.ApplyT(func(v *Cat) baremetal.ProvisionerConnectionPtrOutput { return v.Connection }).(baremetal.ProvisionerConnectionPtrOutput)
}

func (o CatOutput) CreatedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cat) pulumi.StringArrayOutput { return v.CreatedFiles }).(pulumi.StringArrayOutput)
}

func (o CatOutput) CustomDelete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cat) pulumi.StringArrayOutput { return v.CustomDelete }).(pulumi.StringArrayOutput)
}

func (o CatOutput) CustomUpdate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cat) pulumi.StringArrayOutput { return v.CustomUpdate }).(pulumi.StringArrayOutput)
}

func (o CatOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cat) pulumi.IntOutput { return v.ExitCode }).(pulumi.IntOutput)
}

func (o CatOutput) MovedFiles() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cat) pulumi.StringMapOutput { return v.MovedFiles }).(pulumi.StringMapOutput)
}

func (o CatOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Cat) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

func (o CatOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Cat) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

func (o CatOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Cat) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatInput)(nil)).Elem(), &Cat{})
	pulumi.RegisterOutputType(CatOutput{})
}
