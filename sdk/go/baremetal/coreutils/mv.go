// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package coreutils

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/config"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Mv struct {
	pulumi.CustomResourceState

	Args         MvArgsTypeOutput                      `pulumi:"args"`
	Connection   config.ProvisionerConnectionPtrOutput `pulumi:"connection"`
	CreatedFiles pulumi.StringArrayOutput              `pulumi:"createdFiles"`
	CustomDelete pulumi.StringArrayOutput              `pulumi:"customDelete"`
	CustomUpdate pulumi.StringArrayOutput              `pulumi:"customUpdate"`
	ExitCode     pulumi.IntOutput                      `pulumi:"exitCode"`
	MovedFiles   pulumi.StringMapOutput                `pulumi:"movedFiles"`
	Stderr       pulumi.StringOutput                   `pulumi:"stderr"`
	Stdout       pulumi.StringOutput                   `pulumi:"stdout"`
	Triggers     pulumi.ArrayOutput                    `pulumi:"triggers"`
}

// NewMv registers a new resource with the given unique name, arguments, and options.
func NewMv(ctx *pulumi.Context,
	name string, args *MvArgs, opts ...pulumi.ResourceOption) (*Mv, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Args == nil {
		return nil, errors.New("invalid value for required argument 'Args'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mv
	err := ctx.RegisterResource("baremetal:coreutils:Mv", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMv gets an existing Mv resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMv(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MvState, opts ...pulumi.ResourceOption) (*Mv, error) {
	var resource Mv
	err := ctx.ReadResource("baremetal:coreutils:Mv", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mv resources.
type mvState struct {
}

type MvState struct {
}

func (MvState) ElementType() reflect.Type {
	return reflect.TypeOf((*mvState)(nil)).Elem()
}

type mvArgs struct {
	Args         MvArgsType                    `pulumi:"args"`
	Connection   *config.ProvisionerConnection `pulumi:"connection"`
	CustomDelete []string                      `pulumi:"customDelete"`
	CustomUpdate []string                      `pulumi:"customUpdate"`
	Triggers     []interface{}                 `pulumi:"triggers"`
}

// The set of arguments for constructing a Mv resource.
type MvArgs struct {
	Args         MvArgsTypeInput
	Connection   config.ProvisionerConnectionPtrInput
	CustomDelete pulumi.StringArrayInput
	CustomUpdate pulumi.StringArrayInput
	Triggers     pulumi.ArrayInput
}

func (MvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mvArgs)(nil)).Elem()
}

type MvInput interface {
	pulumi.Input

	ToMvOutput() MvOutput
	ToMvOutputWithContext(ctx context.Context) MvOutput
}

func (*Mv) ElementType() reflect.Type {
	return reflect.TypeOf((**Mv)(nil)).Elem()
}

func (i *Mv) ToMvOutput() MvOutput {
	return i.ToMvOutputWithContext(context.Background())
}

func (i *Mv) ToMvOutputWithContext(ctx context.Context) MvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MvOutput)
}

func (i *Mv) ToOutput(ctx context.Context) pulumix.Output[*Mv] {
	return pulumix.Output[*Mv]{
		OutputState: i.ToMvOutputWithContext(ctx).OutputState,
	}
}

type MvOutput struct{ *pulumi.OutputState }

func (MvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mv)(nil)).Elem()
}

func (o MvOutput) ToMvOutput() MvOutput {
	return o
}

func (o MvOutput) ToMvOutputWithContext(ctx context.Context) MvOutput {
	return o
}

func (o MvOutput) ToOutput(ctx context.Context) pulumix.Output[*Mv] {
	return pulumix.Output[*Mv]{
		OutputState: o.OutputState,
	}
}

func (o MvOutput) Args() MvArgsTypeOutput {
	return o.ApplyT(func(v *Mv) MvArgsTypeOutput { return v.Args }).(MvArgsTypeOutput)
}

func (o MvOutput) Connection() config.ProvisionerConnectionPtrOutput {
	return o.ApplyT(func(v *Mv) config.ProvisionerConnectionPtrOutput { return v.Connection }).(config.ProvisionerConnectionPtrOutput)
}

func (o MvOutput) CreatedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Mv) pulumi.StringArrayOutput { return v.CreatedFiles }).(pulumi.StringArrayOutput)
}

func (o MvOutput) CustomDelete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Mv) pulumi.StringArrayOutput { return v.CustomDelete }).(pulumi.StringArrayOutput)
}

func (o MvOutput) CustomUpdate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Mv) pulumi.StringArrayOutput { return v.CustomUpdate }).(pulumi.StringArrayOutput)
}

func (o MvOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v *Mv) pulumi.IntOutput { return v.ExitCode }).(pulumi.IntOutput)
}

func (o MvOutput) MovedFiles() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Mv) pulumi.StringMapOutput { return v.MovedFiles }).(pulumi.StringMapOutput)
}

func (o MvOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Mv) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

func (o MvOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Mv) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

func (o MvOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Mv) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MvInput)(nil)).Elem(), &Mv{})
	pulumi.RegisterOutputType(MvOutput{})
}
