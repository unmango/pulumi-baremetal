// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Mv struct {
	pulumi.CustomResourceState

	Args         pulumix.GPtrOutput[MvArgsType, MvArgsTypeOutput] `pulumi:"args"`
	CreatedFiles pulumix.ArrayOutput[string]                      `pulumi:"createdFiles"`
	ExitCode     pulumix.Output[int]                              `pulumi:"exitCode"`
	Stderr       pulumix.Output[string]                           `pulumi:"stderr"`
	Stdout       pulumix.Output[string]                           `pulumi:"stdout"`
}

// NewMv registers a new resource with the given unique name, arguments, and options.
func NewMv(ctx *pulumi.Context,
	name string, args *MvArgs, opts ...pulumi.ResourceOption) (*Mv, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mv
	err := ctx.RegisterResource("baremetal:cmd:Mv", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMv gets an existing Mv resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMv(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MvState, opts ...pulumi.ResourceOption) (*Mv, error) {
	var resource Mv
	err := ctx.ReadResource("baremetal:cmd:Mv", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mv resources.
type mvState struct {
}

type MvState struct {
}

func (MvState) ElementType() reflect.Type {
	return reflect.TypeOf((*mvState)(nil)).Elem()
}

type mvArgs struct {
	Backup               *string  `pulumi:"backup"`
	Destination          *string  `pulumi:"destination"`
	Directory            *string  `pulumi:"directory"`
	Force                *bool    `pulumi:"force"`
	Help                 *bool    `pulumi:"help"`
	NoClobber            *bool    `pulumi:"noClobber"`
	NoTargetDirectory    *bool    `pulumi:"noTargetDirectory"`
	Source               []string `pulumi:"source"`
	StripTrailingSlashes *bool    `pulumi:"stripTrailingSlashes"`
	Suffix               *string  `pulumi:"suffix"`
	TargetDirectory      *string  `pulumi:"targetDirectory"`
	Update               *bool    `pulumi:"update"`
	Verbose              *bool    `pulumi:"verbose"`
	Version              *bool    `pulumi:"version"`
}

// The set of arguments for constructing a Mv resource.
type MvArgs struct {
	Backup               pulumix.Input[*string]
	Destination          pulumix.Input[*string]
	Directory            pulumix.Input[*string]
	Force                pulumix.Input[*bool]
	Help                 pulumix.Input[*bool]
	NoClobber            pulumix.Input[*bool]
	NoTargetDirectory    pulumix.Input[*bool]
	Source               pulumix.Input[[]string]
	StripTrailingSlashes pulumix.Input[*bool]
	Suffix               pulumix.Input[*string]
	TargetDirectory      pulumix.Input[*string]
	Update               pulumix.Input[*bool]
	Verbose              pulumix.Input[*bool]
	Version              pulumix.Input[*bool]
}

func (MvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mvArgs)(nil)).Elem()
}

type MvOutput struct{ *pulumi.OutputState }

func (MvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mv)(nil)).Elem()
}

func (o MvOutput) ToMvOutput() MvOutput {
	return o
}

func (o MvOutput) ToMvOutputWithContext(ctx context.Context) MvOutput {
	return o
}

func (o MvOutput) ToOutput(ctx context.Context) pulumix.Output[Mv] {
	return pulumix.Output[Mv]{
		OutputState: o.OutputState,
	}
}

func (o MvOutput) Args() pulumix.GPtrOutput[MvArgsType, MvArgsTypeOutput] {
	value := pulumix.Apply[Mv](o, func(v Mv) pulumix.GPtrOutput[MvArgsType, MvArgsTypeOutput] { return v.Args })
	unwrapped := pulumix.Flatten[*MvArgsType, pulumix.GPtrOutput[MvArgsType, MvArgsTypeOutput]](value)
	return pulumix.GPtrOutput[MvArgsType, MvArgsTypeOutput]{OutputState: unwrapped.OutputState}
}

func (o MvOutput) CreatedFiles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Mv](o, func(v Mv) pulumix.ArrayOutput[string] { return v.CreatedFiles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o MvOutput) ExitCode() pulumix.Output[int] {
	value := pulumix.Apply[Mv](o, func(v Mv) pulumix.Output[int] { return v.ExitCode })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o MvOutput) Stderr() pulumix.Output[string] {
	value := pulumix.Apply[Mv](o, func(v Mv) pulumix.Output[string] { return v.Stderr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o MvOutput) Stdout() pulumix.Output[string] {
	value := pulumix.Apply[Mv](o, func(v Mv) pulumix.Output[string] { return v.Stdout })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MvOutput{})
}
