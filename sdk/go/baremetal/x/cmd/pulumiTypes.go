// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

var _ = internal.GetEnvOrDefault

type MvArgsType struct {
	Backup               *string  `pulumi:"backup"`
	Destination          *string  `pulumi:"destination"`
	Directory            *string  `pulumi:"directory"`
	Force                *bool    `pulumi:"force"`
	Help                 *bool    `pulumi:"help"`
	NoClobber            *bool    `pulumi:"noClobber"`
	NoTargetDirectory    *bool    `pulumi:"noTargetDirectory"`
	Source               []string `pulumi:"source"`
	StripTrailingSlashes *bool    `pulumi:"stripTrailingSlashes"`
	Suffix               *string  `pulumi:"suffix"`
	TargetDirectory      *string  `pulumi:"targetDirectory"`
	Update               *bool    `pulumi:"update"`
	Verbose              *bool    `pulumi:"verbose"`
	Version              *bool    `pulumi:"version"`
}

type MvArgsTypeOutput struct{ *pulumi.OutputState }

func (MvArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MvArgsType)(nil)).Elem()
}

func (o MvArgsTypeOutput) ToMvArgsTypeOutput() MvArgsTypeOutput {
	return o
}

func (o MvArgsTypeOutput) ToMvArgsTypeOutputWithContext(ctx context.Context) MvArgsTypeOutput {
	return o
}

func (o MvArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MvArgsType] {
	return pulumix.Output[MvArgsType]{
		OutputState: o.OutputState,
	}
}

func (o MvArgsTypeOutput) Backup() pulumix.Output[*string] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *string { return v.Backup })
}

func (o MvArgsTypeOutput) Destination() pulumix.Output[*string] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *string { return v.Destination })
}

func (o MvArgsTypeOutput) Directory() pulumix.Output[*string] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *string { return v.Directory })
}

func (o MvArgsTypeOutput) Force() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.Force })
}

func (o MvArgsTypeOutput) Help() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.Help })
}

func (o MvArgsTypeOutput) NoClobber() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.NoClobber })
}

func (o MvArgsTypeOutput) NoTargetDirectory() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.NoTargetDirectory })
}

func (o MvArgsTypeOutput) Source() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MvArgsType](o, func(v MvArgsType) []string { return v.Source })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o MvArgsTypeOutput) StripTrailingSlashes() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.StripTrailingSlashes })
}

func (o MvArgsTypeOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *string { return v.Suffix })
}

func (o MvArgsTypeOutput) TargetDirectory() pulumix.Output[*string] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *string { return v.TargetDirectory })
}

func (o MvArgsTypeOutput) Update() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.Update })
}

func (o MvArgsTypeOutput) Verbose() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.Verbose })
}

func (o MvArgsTypeOutput) Version() pulumix.Output[*bool] {
	return pulumix.Apply[MvArgsType](o, func(v MvArgsType) *bool { return v.Version })
}

type RmArgsType struct {
	Dir           *bool    `pulumi:"dir"`
	Files         []string `pulumi:"files"`
	Force         *bool    `pulumi:"force"`
	Help          *bool    `pulumi:"help"`
	OneFileSystem *bool    `pulumi:"oneFileSystem"`
	Recursive     *bool    `pulumi:"recursive"`
	Verbose       *bool    `pulumi:"verbose"`
}

type RmArgsTypeOutput struct{ *pulumi.OutputState }

func (RmArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RmArgsType)(nil)).Elem()
}

func (o RmArgsTypeOutput) ToRmArgsTypeOutput() RmArgsTypeOutput {
	return o
}

func (o RmArgsTypeOutput) ToRmArgsTypeOutputWithContext(ctx context.Context) RmArgsTypeOutput {
	return o
}

func (o RmArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RmArgsType] {
	return pulumix.Output[RmArgsType]{
		OutputState: o.OutputState,
	}
}

func (o RmArgsTypeOutput) Dir() pulumix.Output[*bool] {
	return pulumix.Apply[RmArgsType](o, func(v RmArgsType) *bool { return v.Dir })
}

func (o RmArgsTypeOutput) Files() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RmArgsType](o, func(v RmArgsType) []string { return v.Files })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o RmArgsTypeOutput) Force() pulumix.Output[*bool] {
	return pulumix.Apply[RmArgsType](o, func(v RmArgsType) *bool { return v.Force })
}

func (o RmArgsTypeOutput) Help() pulumix.Output[*bool] {
	return pulumix.Apply[RmArgsType](o, func(v RmArgsType) *bool { return v.Help })
}

func (o RmArgsTypeOutput) OneFileSystem() pulumix.Output[*bool] {
	return pulumix.Apply[RmArgsType](o, func(v RmArgsType) *bool { return v.OneFileSystem })
}

func (o RmArgsTypeOutput) Recursive() pulumix.Output[*bool] {
	return pulumix.Apply[RmArgsType](o, func(v RmArgsType) *bool { return v.Recursive })
}

func (o RmArgsTypeOutput) Verbose() pulumix.Output[*bool] {
	return pulumix.Apply[RmArgsType](o, func(v RmArgsType) *bool { return v.Verbose })
}

type TarArgsType struct {
	Append               *bool    `pulumi:"append"`
	Args                 []string `pulumi:"args"`
	Bzip2                *bool    `pulumi:"bzip2"`
	Create               *bool    `pulumi:"create"`
	Delete               *bool    `pulumi:"delete"`
	Diff                 *bool    `pulumi:"diff"`
	Directory            *string  `pulumi:"directory"`
	Exclude              *string  `pulumi:"exclude"`
	ExcludeFrom          *string  `pulumi:"excludeFrom"`
	ExcludeVcs           *bool    `pulumi:"excludeVcs"`
	ExcludeVcsIgnores    *bool    `pulumi:"excludeVcsIgnores"`
	Extract              *bool    `pulumi:"extract"`
	File                 *string  `pulumi:"file"`
	Gzip                 *bool    `pulumi:"gzip"`
	IgnoreCommandError   *bool    `pulumi:"ignoreCommandError"`
	KeepDirectorySymlink *bool    `pulumi:"keepDirectorySymlink"`
	KeepNewerFiles       *bool    `pulumi:"keepNewerFiles"`
	KeepOldfiles         *bool    `pulumi:"keepOldfiles"`
	List                 *bool    `pulumi:"list"`
	Lzip                 *bool    `pulumi:"lzip"`
	Lzma                 *bool    `pulumi:"lzma"`
	Lzop                 *bool    `pulumi:"lzop"`
	NoOverwriteDir       *bool    `pulumi:"noOverwriteDir"`
	NoSeek               *bool    `pulumi:"noSeek"`
	Overwrite            *bool    `pulumi:"overwrite"`
	OverwriteDir         *bool    `pulumi:"overwriteDir"`
	RemoveFiles          *bool    `pulumi:"removeFiles"`
	SkipOldFiles         *bool    `pulumi:"skipOldFiles"`
	Sparse               *bool    `pulumi:"sparse"`
	StripComponents      *int     `pulumi:"stripComponents"`
	Suffix               *string  `pulumi:"suffix"`
	ToStdout             *bool    `pulumi:"toStdout"`
	Transform            *string  `pulumi:"transform"`
	UnlinkFirst          *bool    `pulumi:"unlinkFirst"`
	Update               *bool    `pulumi:"update"`
	Verbose              *bool    `pulumi:"verbose"`
	Verify               *bool    `pulumi:"verify"`
	Xz                   *bool    `pulumi:"xz"`
	Zstd                 *bool    `pulumi:"zstd"`
}

type TarArgsTypeOutput struct{ *pulumi.OutputState }

func (TarArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarArgsType)(nil)).Elem()
}

func (o TarArgsTypeOutput) ToTarArgsTypeOutput() TarArgsTypeOutput {
	return o
}

func (o TarArgsTypeOutput) ToTarArgsTypeOutputWithContext(ctx context.Context) TarArgsTypeOutput {
	return o
}

func (o TarArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TarArgsType] {
	return pulumix.Output[TarArgsType]{
		OutputState: o.OutputState,
	}
}

func (o TarArgsTypeOutput) Append() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Append })
}

func (o TarArgsTypeOutput) Args() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TarArgsType](o, func(v TarArgsType) []string { return v.Args })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o TarArgsTypeOutput) Bzip2() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Bzip2 })
}

func (o TarArgsTypeOutput) Create() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Create })
}

func (o TarArgsTypeOutput) Delete() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Delete })
}

func (o TarArgsTypeOutput) Diff() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Diff })
}

func (o TarArgsTypeOutput) Directory() pulumix.Output[*string] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *string { return v.Directory })
}

func (o TarArgsTypeOutput) Exclude() pulumix.Output[*string] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *string { return v.Exclude })
}

func (o TarArgsTypeOutput) ExcludeFrom() pulumix.Output[*string] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *string { return v.ExcludeFrom })
}

func (o TarArgsTypeOutput) ExcludeVcs() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.ExcludeVcs })
}

func (o TarArgsTypeOutput) ExcludeVcsIgnores() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.ExcludeVcsIgnores })
}

func (o TarArgsTypeOutput) Extract() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Extract })
}

func (o TarArgsTypeOutput) File() pulumix.Output[*string] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *string { return v.File })
}

func (o TarArgsTypeOutput) Gzip() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Gzip })
}

func (o TarArgsTypeOutput) IgnoreCommandError() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.IgnoreCommandError })
}

func (o TarArgsTypeOutput) KeepDirectorySymlink() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.KeepDirectorySymlink })
}

func (o TarArgsTypeOutput) KeepNewerFiles() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.KeepNewerFiles })
}

func (o TarArgsTypeOutput) KeepOldfiles() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.KeepOldfiles })
}

func (o TarArgsTypeOutput) List() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.List })
}

func (o TarArgsTypeOutput) Lzip() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Lzip })
}

func (o TarArgsTypeOutput) Lzma() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Lzma })
}

func (o TarArgsTypeOutput) Lzop() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Lzop })
}

func (o TarArgsTypeOutput) NoOverwriteDir() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.NoOverwriteDir })
}

func (o TarArgsTypeOutput) NoSeek() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.NoSeek })
}

func (o TarArgsTypeOutput) Overwrite() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Overwrite })
}

func (o TarArgsTypeOutput) OverwriteDir() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.OverwriteDir })
}

func (o TarArgsTypeOutput) RemoveFiles() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.RemoveFiles })
}

func (o TarArgsTypeOutput) SkipOldFiles() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.SkipOldFiles })
}

func (o TarArgsTypeOutput) Sparse() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Sparse })
}

func (o TarArgsTypeOutput) StripComponents() pulumix.Output[*int] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *int { return v.StripComponents })
}

func (o TarArgsTypeOutput) Suffix() pulumix.Output[*string] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *string { return v.Suffix })
}

func (o TarArgsTypeOutput) ToStdout() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.ToStdout })
}

func (o TarArgsTypeOutput) Transform() pulumix.Output[*string] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *string { return v.Transform })
}

func (o TarArgsTypeOutput) UnlinkFirst() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.UnlinkFirst })
}

func (o TarArgsTypeOutput) Update() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Update })
}

func (o TarArgsTypeOutput) Verbose() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Verbose })
}

func (o TarArgsTypeOutput) Verify() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Verify })
}

func (o TarArgsTypeOutput) Xz() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Xz })
}

func (o TarArgsTypeOutput) Zstd() pulumix.Output[*bool] {
	return pulumix.Apply[TarArgsType](o, func(v TarArgsType) *bool { return v.Zstd })
}

type TeeArgsType struct {
	Append  *bool    `pulumi:"append"`
	Content string   `pulumi:"content"`
	Files   []string `pulumi:"files"`
}

type TeeArgsTypeOutput struct{ *pulumi.OutputState }

func (TeeArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeArgsType)(nil)).Elem()
}

func (o TeeArgsTypeOutput) ToTeeArgsTypeOutput() TeeArgsTypeOutput {
	return o
}

func (o TeeArgsTypeOutput) ToTeeArgsTypeOutputWithContext(ctx context.Context) TeeArgsTypeOutput {
	return o
}

func (o TeeArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TeeArgsType] {
	return pulumix.Output[TeeArgsType]{
		OutputState: o.OutputState,
	}
}

func (o TeeArgsTypeOutput) Append() pulumix.Output[*bool] {
	return pulumix.Apply[TeeArgsType](o, func(v TeeArgsType) *bool { return v.Append })
}

func (o TeeArgsTypeOutput) Content() pulumix.Output[string] {
	return pulumix.Apply[TeeArgsType](o, func(v TeeArgsType) string { return v.Content })
}

func (o TeeArgsTypeOutput) Files() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TeeArgsType](o, func(v TeeArgsType) []string { return v.Files })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type WgetArgsType struct {
	AppendOutput       *string  `pulumi:"appendOutput"`
	Background         *bool    `pulumi:"background"`
	Base               *string  `pulumi:"base"`
	CaCertificateFile  *string  `pulumi:"caCertificateFile"`
	CaDirectory        *string  `pulumi:"caDirectory"`
	Certificate        *string  `pulumi:"certificate"`
	CertificateType    *string  `pulumi:"certificateType"`
	Config             *string  `pulumi:"config"`
	Continue           *bool    `pulumi:"continue"`
	CrlFile            *string  `pulumi:"crlFile"`
	CutDirs            *int     `pulumi:"cutDirs"`
	Debug              *bool    `pulumi:"debug"`
	DirectoryPrefix    *string  `pulumi:"directoryPrefix"`
	Execute            []string `pulumi:"execute"`
	ForceDirectories   *bool    `pulumi:"forceDirectories"`
	ForceHtml          *bool    `pulumi:"forceHtml"`
	Help               *bool    `pulumi:"help"`
	HttpsOnly          *bool    `pulumi:"httpsOnly"`
	Inet4Only          *bool    `pulumi:"inet4Only"`
	InputFile          *string  `pulumi:"inputFile"`
	KeepSessionCookies *bool    `pulumi:"keepSessionCookies"`
	NoClobber          *bool    `pulumi:"noClobber"`
	NoDirectories      *bool    `pulumi:"noDirectories"`
	NoDnsCache         *bool    `pulumi:"noDnsCache"`
	NoVerbose          *bool    `pulumi:"noVerbose"`
	OutputDocument     *string  `pulumi:"outputDocument"`
	OutputFile         *string  `pulumi:"outputFile"`
	Password           *string  `pulumi:"password"`
	PrivateKey         *string  `pulumi:"privateKey"`
	PrivateKeyType     *string  `pulumi:"privateKeyType"`
	Progress           *string  `pulumi:"progress"`
	Quiet              *bool    `pulumi:"quiet"`
	RandomWait         *bool    `pulumi:"randomWait"`
	ReportSpeed        *string  `pulumi:"reportSpeed"`
	SaveCookies        *string  `pulumi:"saveCookies"`
	ShowProgress       *bool    `pulumi:"showProgress"`
	StartPos           *string  `pulumi:"startPos"`
	Timeout            *string  `pulumi:"timeout"`
	Timestamping       *bool    `pulumi:"timestamping"`
	Tries              *int     `pulumi:"tries"`
	Urls               []string `pulumi:"urls"`
	User               *string  `pulumi:"user"`
	UserAgent          *string  `pulumi:"userAgent"`
	Verbose            *bool    `pulumi:"verbose"`
	Version            *string  `pulumi:"version"`
	Wait               *string  `pulumi:"wait"`
}

type WgetArgsTypeOutput struct{ *pulumi.OutputState }

func (WgetArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WgetArgsType)(nil)).Elem()
}

func (o WgetArgsTypeOutput) ToWgetArgsTypeOutput() WgetArgsTypeOutput {
	return o
}

func (o WgetArgsTypeOutput) ToWgetArgsTypeOutputWithContext(ctx context.Context) WgetArgsTypeOutput {
	return o
}

func (o WgetArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[WgetArgsType] {
	return pulumix.Output[WgetArgsType]{
		OutputState: o.OutputState,
	}
}

func (o WgetArgsTypeOutput) AppendOutput() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.AppendOutput })
}

func (o WgetArgsTypeOutput) Background() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Background })
}

func (o WgetArgsTypeOutput) Base() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Base })
}

func (o WgetArgsTypeOutput) CaCertificateFile() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.CaCertificateFile })
}

func (o WgetArgsTypeOutput) CaDirectory() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.CaDirectory })
}

func (o WgetArgsTypeOutput) Certificate() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Certificate })
}

func (o WgetArgsTypeOutput) CertificateType() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.CertificateType })
}

func (o WgetArgsTypeOutput) Config() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Config })
}

func (o WgetArgsTypeOutput) Continue() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Continue })
}

func (o WgetArgsTypeOutput) CrlFile() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.CrlFile })
}

func (o WgetArgsTypeOutput) CutDirs() pulumix.Output[*int] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *int { return v.CutDirs })
}

func (o WgetArgsTypeOutput) Debug() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Debug })
}

func (o WgetArgsTypeOutput) DirectoryPrefix() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.DirectoryPrefix })
}

func (o WgetArgsTypeOutput) Execute() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) []string { return v.Execute })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o WgetArgsTypeOutput) ForceDirectories() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.ForceDirectories })
}

func (o WgetArgsTypeOutput) ForceHtml() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.ForceHtml })
}

func (o WgetArgsTypeOutput) Help() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Help })
}

func (o WgetArgsTypeOutput) HttpsOnly() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.HttpsOnly })
}

func (o WgetArgsTypeOutput) Inet4Only() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Inet4Only })
}

func (o WgetArgsTypeOutput) InputFile() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.InputFile })
}

func (o WgetArgsTypeOutput) KeepSessionCookies() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.KeepSessionCookies })
}

func (o WgetArgsTypeOutput) NoClobber() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.NoClobber })
}

func (o WgetArgsTypeOutput) NoDirectories() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.NoDirectories })
}

func (o WgetArgsTypeOutput) NoDnsCache() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.NoDnsCache })
}

func (o WgetArgsTypeOutput) NoVerbose() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.NoVerbose })
}

func (o WgetArgsTypeOutput) OutputDocument() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.OutputDocument })
}

func (o WgetArgsTypeOutput) OutputFile() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.OutputFile })
}

func (o WgetArgsTypeOutput) Password() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Password })
}

func (o WgetArgsTypeOutput) PrivateKey() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.PrivateKey })
}

func (o WgetArgsTypeOutput) PrivateKeyType() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.PrivateKeyType })
}

func (o WgetArgsTypeOutput) Progress() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Progress })
}

func (o WgetArgsTypeOutput) Quiet() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Quiet })
}

func (o WgetArgsTypeOutput) RandomWait() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.RandomWait })
}

func (o WgetArgsTypeOutput) ReportSpeed() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.ReportSpeed })
}

func (o WgetArgsTypeOutput) SaveCookies() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.SaveCookies })
}

func (o WgetArgsTypeOutput) ShowProgress() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.ShowProgress })
}

func (o WgetArgsTypeOutput) StartPos() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.StartPos })
}

func (o WgetArgsTypeOutput) Timeout() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Timeout })
}

func (o WgetArgsTypeOutput) Timestamping() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Timestamping })
}

func (o WgetArgsTypeOutput) Tries() pulumix.Output[*int] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *int { return v.Tries })
}

func (o WgetArgsTypeOutput) Urls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) []string { return v.Urls })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o WgetArgsTypeOutput) User() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.User })
}

func (o WgetArgsTypeOutput) UserAgent() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.UserAgent })
}

func (o WgetArgsTypeOutput) Verbose() pulumix.Output[*bool] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *bool { return v.Verbose })
}

func (o WgetArgsTypeOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Version })
}

func (o WgetArgsTypeOutput) Wait() pulumix.Output[*string] {
	return pulumix.Apply[WgetArgsType](o, func(v WgetArgsType) *string { return v.Wait })
}

func init() {
	pulumi.RegisterOutputType(MvArgsTypeOutput{})
	pulumi.RegisterOutputType(RmArgsTypeOutput{})
	pulumi.RegisterOutputType(TarArgsTypeOutput{})
	pulumi.RegisterOutputType(TeeArgsTypeOutput{})
	pulumi.RegisterOutputType(WgetArgsTypeOutput{})
}
