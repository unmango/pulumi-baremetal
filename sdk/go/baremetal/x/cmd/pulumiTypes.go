// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

var _ = internal.GetEnvOrDefault

type TeeArgsType struct {
	Append  *bool    `pulumi:"append"`
	Content string   `pulumi:"content"`
	Files   []string `pulumi:"files"`
}

type TeeArgsTypeOutput struct{ *pulumi.OutputState }

func (TeeArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeArgsType)(nil)).Elem()
}

func (o TeeArgsTypeOutput) ToTeeArgsTypeOutput() TeeArgsTypeOutput {
	return o
}

func (o TeeArgsTypeOutput) ToTeeArgsTypeOutputWithContext(ctx context.Context) TeeArgsTypeOutput {
	return o
}

func (o TeeArgsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TeeArgsType] {
	return pulumix.Output[TeeArgsType]{
		OutputState: o.OutputState,
	}
}

func (o TeeArgsTypeOutput) Append() pulumix.Output[*bool] {
	return pulumix.Apply[TeeArgsType](o, func(v TeeArgsType) *bool { return v.Append })
}

func (o TeeArgsTypeOutput) Content() pulumix.Output[string] {
	return pulumix.Apply[TeeArgsType](o, func(v TeeArgsType) string { return v.Content })
}

func (o TeeArgsTypeOutput) Files() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TeeArgsType](o, func(v TeeArgsType) []string { return v.Files })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TeeArgsTypeOutput{})
}
