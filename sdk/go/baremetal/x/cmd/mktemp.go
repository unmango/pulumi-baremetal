// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Mktemp struct {
	pulumi.CustomResourceState

	Args         pulumix.GPtrOutput[MktempArgsType, MktempArgsTypeOutput] `pulumi:"args"`
	CreatedFiles pulumix.ArrayOutput[string]                              `pulumi:"createdFiles"`
	ExitCode     pulumix.Output[int]                                      `pulumi:"exitCode"`
	MovedFiles   pulumix.MapOutput[string]                                `pulumi:"movedFiles"`
	Stderr       pulumix.Output[string]                                   `pulumi:"stderr"`
	Stdout       pulumix.Output[string]                                   `pulumi:"stdout"`
}

// NewMktemp registers a new resource with the given unique name, arguments, and options.
func NewMktemp(ctx *pulumi.Context,
	name string, args *MktempArgs, opts ...pulumi.ResourceOption) (*Mktemp, error) {
	if args == nil {
		args = &MktempArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mktemp
	err := ctx.RegisterResource("baremetal:cmd:Mktemp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMktemp gets an existing Mktemp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMktemp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MktempState, opts ...pulumi.ResourceOption) (*Mktemp, error) {
	var resource Mktemp
	err := ctx.ReadResource("baremetal:cmd:Mktemp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mktemp resources.
type mktempState struct {
}

type MktempState struct {
}

func (MktempState) ElementType() reflect.Type {
	return reflect.TypeOf((*mktempState)(nil)).Elem()
}

type mktempArgs struct {
	Directory *bool   `pulumi:"directory"`
	DryRun    *bool   `pulumi:"dryRun"`
	Help      *bool   `pulumi:"help"`
	P         *string `pulumi:"p"`
	Quiet     *bool   `pulumi:"quiet"`
	Suffix    *string `pulumi:"suffix"`
	T         *bool   `pulumi:"t"`
	Template  *string `pulumi:"template"`
	Tmpdir    *bool   `pulumi:"tmpdir"`
	Version   *bool   `pulumi:"version"`
}

// The set of arguments for constructing a Mktemp resource.
type MktempArgs struct {
	Directory pulumix.Input[*bool]
	DryRun    pulumix.Input[*bool]
	Help      pulumix.Input[*bool]
	P         pulumix.Input[*string]
	Quiet     pulumix.Input[*bool]
	Suffix    pulumix.Input[*string]
	T         pulumix.Input[*bool]
	Template  pulumix.Input[*string]
	Tmpdir    pulumix.Input[*bool]
	Version   pulumix.Input[*bool]
}

func (MktempArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mktempArgs)(nil)).Elem()
}

type MktempOutput struct{ *pulumi.OutputState }

func (MktempOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mktemp)(nil)).Elem()
}

func (o MktempOutput) ToMktempOutput() MktempOutput {
	return o
}

func (o MktempOutput) ToMktempOutputWithContext(ctx context.Context) MktempOutput {
	return o
}

func (o MktempOutput) ToOutput(ctx context.Context) pulumix.Output[Mktemp] {
	return pulumix.Output[Mktemp]{
		OutputState: o.OutputState,
	}
}

func (o MktempOutput) Args() pulumix.GPtrOutput[MktempArgsType, MktempArgsTypeOutput] {
	value := pulumix.Apply[Mktemp](o, func(v Mktemp) pulumix.GPtrOutput[MktempArgsType, MktempArgsTypeOutput] { return v.Args })
	unwrapped := pulumix.Flatten[*MktempArgsType, pulumix.GPtrOutput[MktempArgsType, MktempArgsTypeOutput]](value)
	return pulumix.GPtrOutput[MktempArgsType, MktempArgsTypeOutput]{OutputState: unwrapped.OutputState}
}

func (o MktempOutput) CreatedFiles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Mktemp](o, func(v Mktemp) pulumix.ArrayOutput[string] { return v.CreatedFiles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o MktempOutput) ExitCode() pulumix.Output[int] {
	value := pulumix.Apply[Mktemp](o, func(v Mktemp) pulumix.Output[int] { return v.ExitCode })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o MktempOutput) MovedFiles() pulumix.MapOutput[string] {
	value := pulumix.Apply[Mktemp](o, func(v Mktemp) pulumix.MapOutput[string] { return v.MovedFiles })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o MktempOutput) Stderr() pulumix.Output[string] {
	value := pulumix.Apply[Mktemp](o, func(v Mktemp) pulumix.Output[string] { return v.Stderr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o MktempOutput) Stdout() pulumix.Output[string] {
	value := pulumix.Apply[Mktemp](o, func(v Mktemp) pulumix.Output[string] { return v.Stdout })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MktempOutput{})
}
