// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Tar struct {
	pulumi.CustomResourceState

	Args         pulumix.GPtrOutput[TarArgsType, TarArgsTypeOutput] `pulumi:"args"`
	CreatedFiles pulumix.ArrayOutput[string]                        `pulumi:"createdFiles"`
	CustomDelete pulumix.ArrayOutput[string]                        `pulumi:"customDelete"`
	CustomUpdate pulumix.ArrayOutput[string]                        `pulumi:"customUpdate"`
	ExitCode     pulumix.Output[int]                                `pulumi:"exitCode"`
	MovedFiles   pulumix.MapOutput[string]                          `pulumi:"movedFiles"`
	Stderr       pulumix.Output[string]                             `pulumi:"stderr"`
	Stdout       pulumix.Output[string]                             `pulumi:"stdout"`
	Triggers     pulumix.ArrayOutput[any]                           `pulumi:"triggers"`
}

// NewTar registers a new resource with the given unique name, arguments, and options.
func NewTar(ctx *pulumi.Context,
	name string, args *TarArgs, opts ...pulumi.ResourceOption) (*Tar, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Args == nil {
		return nil, errors.New("invalid value for required argument 'Args'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tar
	err := ctx.RegisterResource("baremetal:cmd:Tar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTar gets an existing Tar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TarState, opts ...pulumi.ResourceOption) (*Tar, error) {
	var resource Tar
	err := ctx.ReadResource("baremetal:cmd:Tar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tar resources.
type tarState struct {
}

type TarState struct {
}

func (TarState) ElementType() reflect.Type {
	return reflect.TypeOf((*tarState)(nil)).Elem()
}

type tarArgs struct {
	Args         TarArgsType   `pulumi:"args"`
	CustomDelete []string      `pulumi:"customDelete"`
	CustomUpdate []string      `pulumi:"customUpdate"`
	Triggers     []interface{} `pulumi:"triggers"`
}

// The set of arguments for constructing a Tar resource.
type TarArgs struct {
	Args         pulumix.Input[*TarArgsTypeArgs]
	CustomDelete pulumix.Input[[]string]
	CustomUpdate pulumix.Input[[]string]
	Triggers     pulumix.Input[[]any]
}

func (TarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tarArgs)(nil)).Elem()
}

type TarOutput struct{ *pulumi.OutputState }

func (TarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tar)(nil)).Elem()
}

func (o TarOutput) ToTarOutput() TarOutput {
	return o
}

func (o TarOutput) ToTarOutputWithContext(ctx context.Context) TarOutput {
	return o
}

func (o TarOutput) ToOutput(ctx context.Context) pulumix.Output[Tar] {
	return pulumix.Output[Tar]{
		OutputState: o.OutputState,
	}
}

func (o TarOutput) Args() pulumix.GPtrOutput[TarArgsType, TarArgsTypeOutput] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.GPtrOutput[TarArgsType, TarArgsTypeOutput] { return v.Args })
	unwrapped := pulumix.Flatten[*TarArgsType, pulumix.GPtrOutput[TarArgsType, TarArgsTypeOutput]](value)
	return pulumix.GPtrOutput[TarArgsType, TarArgsTypeOutput]{OutputState: unwrapped.OutputState}
}

func (o TarOutput) CreatedFiles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.ArrayOutput[string] { return v.CreatedFiles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o TarOutput) CustomDelete() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.ArrayOutput[string] { return v.CustomDelete })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o TarOutput) CustomUpdate() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.ArrayOutput[string] { return v.CustomUpdate })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o TarOutput) ExitCode() pulumix.Output[int] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.Output[int] { return v.ExitCode })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o TarOutput) MovedFiles() pulumix.MapOutput[string] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.MapOutput[string] { return v.MovedFiles })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o TarOutput) Stderr() pulumix.Output[string] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.Output[string] { return v.Stderr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TarOutput) Stdout() pulumix.Output[string] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.Output[string] { return v.Stdout })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TarOutput) Triggers() pulumix.ArrayOutput[any] {
	value := pulumix.Apply[Tar](o, func(v Tar) pulumix.ArrayOutput[any] { return v.Triggers })
	unwrapped := pulumix.Flatten[[]interface{}, pulumix.ArrayOutput[any]](value)
	return pulumix.ArrayOutput[any]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TarOutput{})
}
