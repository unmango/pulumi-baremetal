// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cmd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Wget struct {
	pulumi.CustomResourceState

	Args         pulumix.GPtrOutput[WgetArgsType, WgetArgsTypeOutput] `pulumi:"args"`
	CreatedFiles pulumix.ArrayOutput[string]                          `pulumi:"createdFiles"`
	ExitCode     pulumix.Output[int]                                  `pulumi:"exitCode"`
	Stderr       pulumix.Output[string]                               `pulumi:"stderr"`
	Stdout       pulumix.Output[string]                               `pulumi:"stdout"`
}

// NewWget registers a new resource with the given unique name, arguments, and options.
func NewWget(ctx *pulumi.Context,
	name string, args *WgetArgs, opts ...pulumi.ResourceOption) (*Wget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Urls == nil {
		return nil, errors.New("invalid value for required argument 'Urls'")
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.PrivateKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.PrivateKey.ToOutput(ctx.Context()).Untyped())
		args.PrivateKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.PrivateKeyType != nil {
		untypedSecretValue := pulumi.ToSecret(args.PrivateKeyType.ToOutput(ctx.Context()).Untyped())
		args.PrivateKeyType = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Wget
	err := ctx.RegisterResource("baremetal:cmd:Wget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWget gets an existing Wget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WgetState, opts ...pulumi.ResourceOption) (*Wget, error) {
	var resource Wget
	err := ctx.ReadResource("baremetal:cmd:Wget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Wget resources.
type wgetState struct {
}

type WgetState struct {
}

func (WgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*wgetState)(nil)).Elem()
}

type wgetArgs struct {
	AppendOutput       *string  `pulumi:"appendOutput"`
	Background         *bool    `pulumi:"background"`
	Base               *string  `pulumi:"base"`
	CaCertificateFile  *string  `pulumi:"caCertificateFile"`
	CaDirectory        *string  `pulumi:"caDirectory"`
	Certificate        *string  `pulumi:"certificate"`
	CertificateType    *string  `pulumi:"certificateType"`
	Config             *string  `pulumi:"config"`
	Continue           *bool    `pulumi:"continue"`
	CrlFile            *string  `pulumi:"crlFile"`
	CutDirs            *int     `pulumi:"cutDirs"`
	Debug              *bool    `pulumi:"debug"`
	DirectoryPrefix    *string  `pulumi:"directoryPrefix"`
	Execute            []string `pulumi:"execute"`
	ForceDirectories   *bool    `pulumi:"forceDirectories"`
	ForceHtml          *bool    `pulumi:"forceHtml"`
	Help               *bool    `pulumi:"help"`
	HttpsOnly          *bool    `pulumi:"httpsOnly"`
	Inet4Only          *bool    `pulumi:"inet4Only"`
	InputFile          *string  `pulumi:"inputFile"`
	KeepSessionCookies *bool    `pulumi:"keepSessionCookies"`
	NoClobber          *bool    `pulumi:"noClobber"`
	NoDirectories      *bool    `pulumi:"noDirectories"`
	NoDnsCache         *bool    `pulumi:"noDnsCache"`
	NoVerbose          *bool    `pulumi:"noVerbose"`
	OutputDocument     *string  `pulumi:"outputDocument"`
	OutputFile         *string  `pulumi:"outputFile"`
	Password           *string  `pulumi:"password"`
	PrivateKey         *string  `pulumi:"privateKey"`
	PrivateKeyType     *string  `pulumi:"privateKeyType"`
	Progress           *string  `pulumi:"progress"`
	Quiet              *bool    `pulumi:"quiet"`
	RandomWait         *bool    `pulumi:"randomWait"`
	ReportSpeed        *string  `pulumi:"reportSpeed"`
	SaveCookies        *string  `pulumi:"saveCookies"`
	ShowProgress       *bool    `pulumi:"showProgress"`
	StartPos           *string  `pulumi:"startPos"`
	Timeout            *string  `pulumi:"timeout"`
	Timestamping       *bool    `pulumi:"timestamping"`
	Tries              *int     `pulumi:"tries"`
	Urls               []string `pulumi:"urls"`
	User               *string  `pulumi:"user"`
	UserAgent          *string  `pulumi:"userAgent"`
	Verbose            *bool    `pulumi:"verbose"`
	Version            *string  `pulumi:"version"`
	Wait               *string  `pulumi:"wait"`
}

// The set of arguments for constructing a Wget resource.
type WgetArgs struct {
	AppendOutput       pulumix.Input[*string]
	Background         pulumix.Input[*bool]
	Base               pulumix.Input[*string]
	CaCertificateFile  pulumix.Input[*string]
	CaDirectory        pulumix.Input[*string]
	Certificate        pulumix.Input[*string]
	CertificateType    pulumix.Input[*string]
	Config             pulumix.Input[*string]
	Continue           pulumix.Input[*bool]
	CrlFile            pulumix.Input[*string]
	CutDirs            pulumix.Input[*int]
	Debug              pulumix.Input[*bool]
	DirectoryPrefix    pulumix.Input[*string]
	Execute            pulumix.Input[[]string]
	ForceDirectories   pulumix.Input[*bool]
	ForceHtml          pulumix.Input[*bool]
	Help               pulumix.Input[*bool]
	HttpsOnly          pulumix.Input[*bool]
	Inet4Only          pulumix.Input[*bool]
	InputFile          pulumix.Input[*string]
	KeepSessionCookies pulumix.Input[*bool]
	NoClobber          pulumix.Input[*bool]
	NoDirectories      pulumix.Input[*bool]
	NoDnsCache         pulumix.Input[*bool]
	NoVerbose          pulumix.Input[*bool]
	OutputDocument     pulumix.Input[*string]
	OutputFile         pulumix.Input[*string]
	Password           pulumix.Input[*string]
	PrivateKey         pulumix.Input[*string]
	PrivateKeyType     pulumix.Input[*string]
	Progress           pulumix.Input[*string]
	Quiet              pulumix.Input[*bool]
	RandomWait         pulumix.Input[*bool]
	ReportSpeed        pulumix.Input[*string]
	SaveCookies        pulumix.Input[*string]
	ShowProgress       pulumix.Input[*bool]
	StartPos           pulumix.Input[*string]
	Timeout            pulumix.Input[*string]
	Timestamping       pulumix.Input[*bool]
	Tries              pulumix.Input[*int]
	Urls               pulumix.Input[[]string]
	User               pulumix.Input[*string]
	UserAgent          pulumix.Input[*string]
	Verbose            pulumix.Input[*bool]
	Version            pulumix.Input[*string]
	Wait               pulumix.Input[*string]
}

func (WgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wgetArgs)(nil)).Elem()
}

type WgetOutput struct{ *pulumi.OutputState }

func (WgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Wget)(nil)).Elem()
}

func (o WgetOutput) ToWgetOutput() WgetOutput {
	return o
}

func (o WgetOutput) ToWgetOutputWithContext(ctx context.Context) WgetOutput {
	return o
}

func (o WgetOutput) ToOutput(ctx context.Context) pulumix.Output[Wget] {
	return pulumix.Output[Wget]{
		OutputState: o.OutputState,
	}
}

func (o WgetOutput) Args() pulumix.GPtrOutput[WgetArgsType, WgetArgsTypeOutput] {
	value := pulumix.Apply[Wget](o, func(v Wget) pulumix.GPtrOutput[WgetArgsType, WgetArgsTypeOutput] { return v.Args })
	unwrapped := pulumix.Flatten[*WgetArgsType, pulumix.GPtrOutput[WgetArgsType, WgetArgsTypeOutput]](value)
	return pulumix.GPtrOutput[WgetArgsType, WgetArgsTypeOutput]{OutputState: unwrapped.OutputState}
}

func (o WgetOutput) CreatedFiles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Wget](o, func(v Wget) pulumix.ArrayOutput[string] { return v.CreatedFiles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o WgetOutput) ExitCode() pulumix.Output[int] {
	value := pulumix.Apply[Wget](o, func(v Wget) pulumix.Output[int] { return v.ExitCode })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o WgetOutput) Stderr() pulumix.Output[string] {
	value := pulumix.Apply[Wget](o, func(v Wget) pulumix.Output[string] { return v.Stderr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o WgetOutput) Stdout() pulumix.Output[string] {
	value := pulumix.Apply[Wget](o, func(v Wget) pulumix.Output[string] { return v.Stdout })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WgetOutput{})
}
