// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package baremetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Command struct {
	pulumi.CustomResourceState

	Connection pulumix.GPtrOutput[ProvisionerConnection, ProvisionerConnectionOutput] `pulumi:"connection"`
	Create     pulumix.ArrayOutput[string]                                            `pulumi:"create"`
	Delete     pulumix.ArrayOutput[string]                                            `pulumi:"delete"`
	ExitCode   pulumix.Output[int]                                                    `pulumi:"exitCode"`
	Stderr     pulumix.Output[string]                                                 `pulumi:"stderr"`
	Stdout     pulumix.Output[string]                                                 `pulumi:"stdout"`
	Triggers   pulumix.ArrayOutput[any]                                               `pulumi:"triggers"`
	Update     pulumix.ArrayOutput[string]                                            `pulumi:"update"`
}

// NewCommand registers a new resource with the given unique name, arguments, and options.
func NewCommand(ctx *pulumi.Context,
	name string, args *CommandArgs, opts ...pulumi.ResourceOption) (*Command, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Create == nil {
		return nil, errors.New("invalid value for required argument 'Create'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Command
	err := ctx.RegisterResource("baremetal:index:Command", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommand gets an existing Command resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandState, opts ...pulumi.ResourceOption) (*Command, error) {
	var resource Command
	err := ctx.ReadResource("baremetal:index:Command", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Command resources.
type commandState struct {
}

type CommandState struct {
}

func (CommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandState)(nil)).Elem()
}

type commandArgs struct {
	Connection *ProvisionerConnection `pulumi:"connection"`
	Create     []string               `pulumi:"create"`
	Delete     []string               `pulumi:"delete"`
	Triggers   []interface{}          `pulumi:"triggers"`
	Update     []string               `pulumi:"update"`
}

// The set of arguments for constructing a Command resource.
type CommandArgs struct {
	Connection pulumix.Input[*ProvisionerConnectionArgs]
	Create     pulumix.Input[[]string]
	Delete     pulumix.Input[[]string]
	Triggers   pulumix.Input[[]any]
	Update     pulumix.Input[[]string]
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandArgs)(nil)).Elem()
}

type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

func (o CommandOutput) ToOutput(ctx context.Context) pulumix.Output[Command] {
	return pulumix.Output[Command]{
		OutputState: o.OutputState,
	}
}

func (o CommandOutput) Connection() pulumix.GPtrOutput[ProvisionerConnection, ProvisionerConnectionOutput] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.GPtrOutput[ProvisionerConnection, ProvisionerConnectionOutput] {
		return v.Connection
	})
	unwrapped := pulumix.Flatten[*ProvisionerConnection, pulumix.GPtrOutput[ProvisionerConnection, ProvisionerConnectionOutput]](value)
	return pulumix.GPtrOutput[ProvisionerConnection, ProvisionerConnectionOutput]{OutputState: unwrapped.OutputState}
}

func (o CommandOutput) Create() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.ArrayOutput[string] { return v.Create })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o CommandOutput) Delete() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.ArrayOutput[string] { return v.Delete })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o CommandOutput) ExitCode() pulumix.Output[int] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.Output[int] { return v.ExitCode })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o CommandOutput) Stderr() pulumix.Output[string] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.Output[string] { return v.Stderr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CommandOutput) Stdout() pulumix.Output[string] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.Output[string] { return v.Stdout })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CommandOutput) Triggers() pulumix.ArrayOutput[any] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.ArrayOutput[any] { return v.Triggers })
	unwrapped := pulumix.Flatten[[]interface{}, pulumix.ArrayOutput[any]](value)
	return pulumix.ArrayOutput[any]{OutputState: unwrapped.OutputState}
}

func (o CommandOutput) Update() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Command](o, func(v Command) pulumix.ArrayOutput[string] { return v.Update })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CommandOutput{})
}
