// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package baremetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

type Bootstrap struct {
	pulumi.ResourceState

	Download pulumix.GPtrOutput[remote.Command, remote.CommandOutput] `pulumi:"download"`
	Mktemp   pulumix.GPtrOutput[remote.Command, remote.CommandOutput] `pulumi:"mktemp"`
	Url      pulumix.Output[string]                                   `pulumi:"url"`
}

// NewBootstrap registers a new resource with the given unique name, arguments, and options.
func NewBootstrap(ctx *pulumi.Context,
	name string, args *BootstrapArgs, opts ...pulumi.ResourceOption) (*Bootstrap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Connection != nil {
		args.Connection = pulumix.Apply(args.Connection, func(o *remote.ConnectionArgs) *remote.ConnectionArgs { return o.Defaults() })
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bootstrap
	err := ctx.RegisterRemoteComponentResource("baremetal:index:Bootstrap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type bootstrapArgs struct {
	Connection remote.Connection `pulumi:"connection"`
	Version    string            `pulumi:"version"`
}

// The set of arguments for constructing a Bootstrap resource.
type BootstrapArgs struct {
	Connection pulumix.Input[*remote.ConnectionArgs]
	Version    string
}

func (BootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bootstrapArgs)(nil)).Elem()
}

type BootstrapOutput struct{ *pulumi.OutputState }

func (BootstrapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Bootstrap)(nil)).Elem()
}

func (o BootstrapOutput) ToBootstrapOutput() BootstrapOutput {
	return o
}

func (o BootstrapOutput) ToBootstrapOutputWithContext(ctx context.Context) BootstrapOutput {
	return o
}

func (o BootstrapOutput) ToOutput(ctx context.Context) pulumix.Output[Bootstrap] {
	return pulumix.Output[Bootstrap]{
		OutputState: o.OutputState,
	}
}

func (o BootstrapOutput) Download() pulumix.GPtrOutput[remote.Command, remote.CommandOutput] {
	value := pulumix.Apply[Bootstrap](o, func(v Bootstrap) pulumix.GPtrOutput[remote.Command, remote.CommandOutput] { return v.Download })
	unwrapped := pulumix.Flatten[*remote.Command, pulumix.GPtrOutput[remote.Command, remote.CommandOutput]](value)
	return pulumix.GPtrOutput[remote.Command, remote.CommandOutput]{OutputState: unwrapped.OutputState}
}

func (o BootstrapOutput) Mktemp() pulumix.GPtrOutput[remote.Command, remote.CommandOutput] {
	value := pulumix.Apply[Bootstrap](o, func(v Bootstrap) pulumix.GPtrOutput[remote.Command, remote.CommandOutput] { return v.Mktemp })
	unwrapped := pulumix.Flatten[*remote.Command, pulumix.GPtrOutput[remote.Command, remote.CommandOutput]](value)
	return pulumix.GPtrOutput[remote.Command, remote.CommandOutput]{OutputState: unwrapped.OutputState}
}

func (o BootstrapOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Bootstrap](o, func(v Bootstrap) pulumix.Output[string] { return v.Url })
	return value
}

func init() {
	pulumi.RegisterOutputType(BootstrapOutput{})
}
