// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package baremetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unmango/pulumi-baremetal/sdk/go/baremetal/internal"
)

// TEE(1)                           User Commands                           TEE(1)
//
// NAME
//
//	tee - read from standard input and write to standard output and files
//
// SYNOPSIS
//
//	tee [OPTION]... [FILE]...
//
// DESCRIPTION
//
//	    Copy standard input to each FILE, and also to standard output.
//
//	    -a, --append
//	           append to the given FILEs, do not overwrite
//
//	    -i, --ignore-interrupts
//	           ignore interrupt signals
//
//	    -p     operate in a more appropriate MODE with pipes.
//
//	    --output-error[=MODE]
//	           set behavior on write error.  See MODE below
//
//	    --help display this help and exit
//
//	    --version
//	           output version information and exit
//
//	MODE determines behavior with write errors on the outputs:
//	    warn   diagnose errors writing to any output
//
//	    warn-nopipe
//	           diagnose errors writing to any output not a pipe
//
//	    exit   exit on error writing to any output
//
//	    exit-nopipe
//	           exit on error writing to any output not a pipe
//
//	    The  default  MODE  for  the  -p option is 'warn-nopipe'.  With "nopipe"
//	    MODEs, exit immediately if all outputs become broken pipes.  The default
//	    operation when --output-error is not specified, is to  exit  immediately
//	    on error writing to a pipe, and diagnose errors writing to non pipe out‐
//	    puts.
//
// AUTHOR
//
//	Written by Mike Parker, Richard M. Stallman, and David MacKenzie.
//
// REPORTING BUGS
//
//	GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
//	Report any translation bugs to <https://translationproject.org/team/>
//
// COPYRIGHT
//
//	Copyright © 2024 Free Software Foundation, Inc.  License GPLv3+: GNU GPL
//	version 3 or later <https://gnu.org/licenses/gpl.html>.
//	This  is  free  software:  you  are  free to change and redistribute it.
//	There is NO WARRANTY, to the extent permitted by law.
//
// SEE ALSO
//
//	Full documentation <https://www.gnu.org/software/coreutils/tee>
//	or available locally via: info '(coreutils) tee invocation'
//
// GNU coreutils 9.5                  March 2024                            TEE(1)
type Tee struct {
	pulumi.CustomResourceState

	Files  pulumi.StringArrayOutput `pulumi:"files"`
	Stdin  pulumi.StringOutput      `pulumi:"stdin"`
	Stdout pulumi.StringOutput      `pulumi:"stdout"`
}

// NewTee registers a new resource with the given unique name, arguments, and options.
func NewTee(ctx *pulumi.Context,
	name string, args *TeeArgs, opts ...pulumi.ResourceOption) (*Tee, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Files == nil {
		return nil, errors.New("invalid value for required argument 'Files'")
	}
	if args.Stdin == nil {
		return nil, errors.New("invalid value for required argument 'Stdin'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tee
	err := ctx.RegisterResource("baremetal:index:Tee", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTee gets an existing Tee resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTee(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeeState, opts ...pulumi.ResourceOption) (*Tee, error) {
	var resource Tee
	err := ctx.ReadResource("baremetal:index:Tee", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tee resources.
type teeState struct {
}

type TeeState struct {
}

func (TeeState) ElementType() reflect.Type {
	return reflect.TypeOf((*teeState)(nil)).Elem()
}

type teeArgs struct {
	Files []string `pulumi:"files"`
	Stdin string   `pulumi:"stdin"`
}

// The set of arguments for constructing a Tee resource.
type TeeArgs struct {
	Files pulumi.StringArrayInput
	Stdin pulumi.StringInput
}

func (TeeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teeArgs)(nil)).Elem()
}

type TeeInput interface {
	pulumi.Input

	ToTeeOutput() TeeOutput
	ToTeeOutputWithContext(ctx context.Context) TeeOutput
}

func (*Tee) ElementType() reflect.Type {
	return reflect.TypeOf((**Tee)(nil)).Elem()
}

func (i *Tee) ToTeeOutput() TeeOutput {
	return i.ToTeeOutputWithContext(context.Background())
}

func (i *Tee) ToTeeOutputWithContext(ctx context.Context) TeeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeeOutput)
}

type TeeOutput struct{ *pulumi.OutputState }

func (TeeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tee)(nil)).Elem()
}

func (o TeeOutput) ToTeeOutput() TeeOutput {
	return o
}

func (o TeeOutput) ToTeeOutputWithContext(ctx context.Context) TeeOutput {
	return o
}

func (o TeeOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Tee) pulumi.StringArrayOutput { return v.Files }).(pulumi.StringArrayOutput)
}

func (o TeeOutput) Stdin() pulumi.StringOutput {
	return o.ApplyT(func(v *Tee) pulumi.StringOutput { return v.Stdin }).(pulumi.StringOutput)
}

func (o TeeOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Tee) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeeInput)(nil)).Elem(), &Tee{})
	pulumi.RegisterOutputType(TeeOutput{})
}
