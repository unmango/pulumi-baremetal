# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = ['TarArgs', 'Tar']

@pulumi.input_type
class TarArgs:
    def __init__(__self__, *,
                 append: Optional[pulumi.Input[bool]] = None,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bzip2: Optional[pulumi.Input[bool]] = None,
                 create: Optional[pulumi.Input[bool]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 diff: Optional[pulumi.Input[bool]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 exclude: Optional[pulumi.Input[str]] = None,
                 exclude_from: Optional[pulumi.Input[str]] = None,
                 exclude_vcs: Optional[pulumi.Input[bool]] = None,
                 exclude_vcs_ignores: Optional[pulumi.Input[bool]] = None,
                 extract: Optional[pulumi.Input[bool]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 gzip: Optional[pulumi.Input[bool]] = None,
                 ignore_command_error: Optional[pulumi.Input[bool]] = None,
                 keep_directory_symlink: Optional[pulumi.Input[bool]] = None,
                 keep_newer_files: Optional[pulumi.Input[bool]] = None,
                 keep_oldfiles: Optional[pulumi.Input[bool]] = None,
                 list: Optional[pulumi.Input[bool]] = None,
                 lzip: Optional[pulumi.Input[bool]] = None,
                 lzma: Optional[pulumi.Input[bool]] = None,
                 lzop: Optional[pulumi.Input[bool]] = None,
                 no_overwrite_dir: Optional[pulumi.Input[bool]] = None,
                 no_seek: Optional[pulumi.Input[bool]] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 overwrite_dir: Optional[pulumi.Input[bool]] = None,
                 remove_files: Optional[pulumi.Input[bool]] = None,
                 skip_old_files: Optional[pulumi.Input[bool]] = None,
                 sparse: Optional[pulumi.Input[bool]] = None,
                 strip_components: Optional[pulumi.Input[int]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 to_stdout: Optional[pulumi.Input[bool]] = None,
                 transform: Optional[pulumi.Input[str]] = None,
                 unlink_first: Optional[pulumi.Input[bool]] = None,
                 update: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None,
                 verify: Optional[pulumi.Input[bool]] = None,
                 xz: Optional[pulumi.Input[bool]] = None,
                 zstd: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Tar resource.
        """
        if append is not None:
            pulumi.set(__self__, "append", append)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if bzip2 is not None:
            pulumi.set(__self__, "bzip2", bzip2)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if diff is not None:
            pulumi.set(__self__, "diff", diff)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_from is not None:
            pulumi.set(__self__, "exclude_from", exclude_from)
        if exclude_vcs is not None:
            pulumi.set(__self__, "exclude_vcs", exclude_vcs)
        if exclude_vcs_ignores is not None:
            pulumi.set(__self__, "exclude_vcs_ignores", exclude_vcs_ignores)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if gzip is not None:
            pulumi.set(__self__, "gzip", gzip)
        if ignore_command_error is not None:
            pulumi.set(__self__, "ignore_command_error", ignore_command_error)
        if keep_directory_symlink is not None:
            pulumi.set(__self__, "keep_directory_symlink", keep_directory_symlink)
        if keep_newer_files is not None:
            pulumi.set(__self__, "keep_newer_files", keep_newer_files)
        if keep_oldfiles is not None:
            pulumi.set(__self__, "keep_oldfiles", keep_oldfiles)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if lzip is not None:
            pulumi.set(__self__, "lzip", lzip)
        if lzma is not None:
            pulumi.set(__self__, "lzma", lzma)
        if lzop is not None:
            pulumi.set(__self__, "lzop", lzop)
        if no_overwrite_dir is not None:
            pulumi.set(__self__, "no_overwrite_dir", no_overwrite_dir)
        if no_seek is not None:
            pulumi.set(__self__, "no_seek", no_seek)
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)
        if overwrite_dir is not None:
            pulumi.set(__self__, "overwrite_dir", overwrite_dir)
        if remove_files is not None:
            pulumi.set(__self__, "remove_files", remove_files)
        if skip_old_files is not None:
            pulumi.set(__self__, "skip_old_files", skip_old_files)
        if sparse is not None:
            pulumi.set(__self__, "sparse", sparse)
        if strip_components is not None:
            pulumi.set(__self__, "strip_components", strip_components)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if to_stdout is not None:
            pulumi.set(__self__, "to_stdout", to_stdout)
        if transform is not None:
            pulumi.set(__self__, "transform", transform)
        if unlink_first is not None:
            pulumi.set(__self__, "unlink_first", unlink_first)
        if update is not None:
            pulumi.set(__self__, "update", update)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)
        if verify is not None:
            pulumi.set(__self__, "verify", verify)
        if xz is not None:
            pulumi.set(__self__, "xz", xz)
        if zstd is not None:
            pulumi.set(__self__, "zstd", zstd)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def bzip2(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bzip2")

    @bzip2.setter
    def bzip2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bzip2", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def diff(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "diff")

    @diff.setter
    def diff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "diff", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter(name="excludeFrom")
    def exclude_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_from")

    @exclude_from.setter
    def exclude_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_from", value)

    @property
    @pulumi.getter(name="excludeVcs")
    def exclude_vcs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_vcs")

    @exclude_vcs.setter
    def exclude_vcs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_vcs", value)

    @property
    @pulumi.getter(name="excludeVcsIgnores")
    def exclude_vcs_ignores(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_vcs_ignores")

    @exclude_vcs_ignores.setter
    def exclude_vcs_ignores(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_vcs_ignores", value)

    @property
    @pulumi.getter
    def extract(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract")

    @extract.setter
    def extract(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def gzip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "gzip")

    @gzip.setter
    def gzip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gzip", value)

    @property
    @pulumi.getter(name="ignoreCommandError")
    def ignore_command_error(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_command_error")

    @ignore_command_error.setter
    def ignore_command_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_command_error", value)

    @property
    @pulumi.getter(name="keepDirectorySymlink")
    def keep_directory_symlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_directory_symlink")

    @keep_directory_symlink.setter
    def keep_directory_symlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_directory_symlink", value)

    @property
    @pulumi.getter(name="keepNewerFiles")
    def keep_newer_files(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_newer_files")

    @keep_newer_files.setter
    def keep_newer_files(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_newer_files", value)

    @property
    @pulumi.getter(name="keepOldfiles")
    def keep_oldfiles(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_oldfiles")

    @keep_oldfiles.setter
    def keep_oldfiles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_oldfiles", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def lzip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lzip")

    @lzip.setter
    def lzip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lzip", value)

    @property
    @pulumi.getter
    def lzma(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lzma")

    @lzma.setter
    def lzma(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lzma", value)

    @property
    @pulumi.getter
    def lzop(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lzop")

    @lzop.setter
    def lzop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lzop", value)

    @property
    @pulumi.getter(name="noOverwriteDir")
    def no_overwrite_dir(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_overwrite_dir")

    @no_overwrite_dir.setter
    def no_overwrite_dir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_overwrite_dir", value)

    @property
    @pulumi.getter(name="noSeek")
    def no_seek(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_seek")

    @no_seek.setter
    def no_seek(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_seek", value)

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite", value)

    @property
    @pulumi.getter(name="overwriteDir")
    def overwrite_dir(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "overwrite_dir")

    @overwrite_dir.setter
    def overwrite_dir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite_dir", value)

    @property
    @pulumi.getter(name="removeFiles")
    def remove_files(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "remove_files")

    @remove_files.setter
    def remove_files(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_files", value)

    @property
    @pulumi.getter(name="skipOldFiles")
    def skip_old_files(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_old_files")

    @skip_old_files.setter
    def skip_old_files(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_old_files", value)

    @property
    @pulumi.getter
    def sparse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sparse")

    @sparse.setter
    def sparse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sparse", value)

    @property
    @pulumi.getter(name="stripComponents")
    def strip_components(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "strip_components")

    @strip_components.setter
    def strip_components(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "strip_components", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="toStdout")
    def to_stdout(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "to_stdout")

    @to_stdout.setter
    def to_stdout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "to_stdout", value)

    @property
    @pulumi.getter
    def transform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transform")

    @transform.setter
    def transform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transform", value)

    @property
    @pulumi.getter(name="unlinkFirst")
    def unlink_first(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unlink_first")

    @unlink_first.setter
    def unlink_first(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unlink_first", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update", value)

    @property
    @pulumi.getter
    def verbose(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verbose")

    @verbose.setter
    def verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verbose", value)

    @property
    @pulumi.getter
    def verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify")

    @verify.setter
    def verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify", value)

    @property
    @pulumi.getter
    def xz(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "xz")

    @xz.setter
    def xz(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xz", value)

    @property
    @pulumi.getter
    def zstd(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "zstd")

    @zstd.setter
    def zstd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zstd", value)


class Tar(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 append: Optional[pulumi.Input[bool]] = None,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bzip2: Optional[pulumi.Input[bool]] = None,
                 create: Optional[pulumi.Input[bool]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 diff: Optional[pulumi.Input[bool]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 exclude: Optional[pulumi.Input[str]] = None,
                 exclude_from: Optional[pulumi.Input[str]] = None,
                 exclude_vcs: Optional[pulumi.Input[bool]] = None,
                 exclude_vcs_ignores: Optional[pulumi.Input[bool]] = None,
                 extract: Optional[pulumi.Input[bool]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 gzip: Optional[pulumi.Input[bool]] = None,
                 ignore_command_error: Optional[pulumi.Input[bool]] = None,
                 keep_directory_symlink: Optional[pulumi.Input[bool]] = None,
                 keep_newer_files: Optional[pulumi.Input[bool]] = None,
                 keep_oldfiles: Optional[pulumi.Input[bool]] = None,
                 list: Optional[pulumi.Input[bool]] = None,
                 lzip: Optional[pulumi.Input[bool]] = None,
                 lzma: Optional[pulumi.Input[bool]] = None,
                 lzop: Optional[pulumi.Input[bool]] = None,
                 no_overwrite_dir: Optional[pulumi.Input[bool]] = None,
                 no_seek: Optional[pulumi.Input[bool]] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 overwrite_dir: Optional[pulumi.Input[bool]] = None,
                 remove_files: Optional[pulumi.Input[bool]] = None,
                 skip_old_files: Optional[pulumi.Input[bool]] = None,
                 sparse: Optional[pulumi.Input[bool]] = None,
                 strip_components: Optional[pulumi.Input[int]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 to_stdout: Optional[pulumi.Input[bool]] = None,
                 transform: Optional[pulumi.Input[str]] = None,
                 unlink_first: Optional[pulumi.Input[bool]] = None,
                 update: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None,
                 verify: Optional[pulumi.Input[bool]] = None,
                 xz: Optional[pulumi.Input[bool]] = None,
                 zstd: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Tar resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TarArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Tar resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TarArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TarArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 append: Optional[pulumi.Input[bool]] = None,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bzip2: Optional[pulumi.Input[bool]] = None,
                 create: Optional[pulumi.Input[bool]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 diff: Optional[pulumi.Input[bool]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 exclude: Optional[pulumi.Input[str]] = None,
                 exclude_from: Optional[pulumi.Input[str]] = None,
                 exclude_vcs: Optional[pulumi.Input[bool]] = None,
                 exclude_vcs_ignores: Optional[pulumi.Input[bool]] = None,
                 extract: Optional[pulumi.Input[bool]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 gzip: Optional[pulumi.Input[bool]] = None,
                 ignore_command_error: Optional[pulumi.Input[bool]] = None,
                 keep_directory_symlink: Optional[pulumi.Input[bool]] = None,
                 keep_newer_files: Optional[pulumi.Input[bool]] = None,
                 keep_oldfiles: Optional[pulumi.Input[bool]] = None,
                 list: Optional[pulumi.Input[bool]] = None,
                 lzip: Optional[pulumi.Input[bool]] = None,
                 lzma: Optional[pulumi.Input[bool]] = None,
                 lzop: Optional[pulumi.Input[bool]] = None,
                 no_overwrite_dir: Optional[pulumi.Input[bool]] = None,
                 no_seek: Optional[pulumi.Input[bool]] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 overwrite_dir: Optional[pulumi.Input[bool]] = None,
                 remove_files: Optional[pulumi.Input[bool]] = None,
                 skip_old_files: Optional[pulumi.Input[bool]] = None,
                 sparse: Optional[pulumi.Input[bool]] = None,
                 strip_components: Optional[pulumi.Input[int]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 to_stdout: Optional[pulumi.Input[bool]] = None,
                 transform: Optional[pulumi.Input[str]] = None,
                 unlink_first: Optional[pulumi.Input[bool]] = None,
                 update: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None,
                 verify: Optional[pulumi.Input[bool]] = None,
                 xz: Optional[pulumi.Input[bool]] = None,
                 zstd: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TarArgs.__new__(TarArgs)

            __props__.__dict__["append"] = append
            __props__.__dict__["args"] = args
            __props__.__dict__["bzip2"] = bzip2
            __props__.__dict__["create"] = create
            __props__.__dict__["delete"] = delete
            __props__.__dict__["diff"] = diff
            __props__.__dict__["directory"] = directory
            __props__.__dict__["exclude"] = exclude
            __props__.__dict__["exclude_from"] = exclude_from
            __props__.__dict__["exclude_vcs"] = exclude_vcs
            __props__.__dict__["exclude_vcs_ignores"] = exclude_vcs_ignores
            __props__.__dict__["extract"] = extract
            __props__.__dict__["file"] = file
            __props__.__dict__["gzip"] = gzip
            __props__.__dict__["ignore_command_error"] = ignore_command_error
            __props__.__dict__["keep_directory_symlink"] = keep_directory_symlink
            __props__.__dict__["keep_newer_files"] = keep_newer_files
            __props__.__dict__["keep_oldfiles"] = keep_oldfiles
            __props__.__dict__["list"] = list
            __props__.__dict__["lzip"] = lzip
            __props__.__dict__["lzma"] = lzma
            __props__.__dict__["lzop"] = lzop
            __props__.__dict__["no_overwrite_dir"] = no_overwrite_dir
            __props__.__dict__["no_seek"] = no_seek
            __props__.__dict__["overwrite"] = overwrite
            __props__.__dict__["overwrite_dir"] = overwrite_dir
            __props__.__dict__["remove_files"] = remove_files
            __props__.__dict__["skip_old_files"] = skip_old_files
            __props__.__dict__["sparse"] = sparse
            __props__.__dict__["strip_components"] = strip_components
            __props__.__dict__["suffix"] = suffix
            __props__.__dict__["to_stdout"] = to_stdout
            __props__.__dict__["transform"] = transform
            __props__.__dict__["unlink_first"] = unlink_first
            __props__.__dict__["update"] = update
            __props__.__dict__["verbose"] = verbose
            __props__.__dict__["verify"] = verify
            __props__.__dict__["xz"] = xz
            __props__.__dict__["zstd"] = zstd
            __props__.__dict__["created_files"] = None
            __props__.__dict__["exit_code"] = None
            __props__.__dict__["moved_files"] = None
            __props__.__dict__["stderr"] = None
            __props__.__dict__["stdout"] = None
        super(Tar, __self__).__init__(
            'baremetal:cmd:Tar',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Tar':
        """
        Get an existing Tar resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TarArgs.__new__(TarArgs)

        __props__.__dict__["args"] = None
        __props__.__dict__["created_files"] = None
        __props__.__dict__["exit_code"] = None
        __props__.__dict__["moved_files"] = None
        __props__.__dict__["stderr"] = None
        __props__.__dict__["stdout"] = None
        return Tar(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def args(self) -> pulumi.Output['outputs.TarArgs']:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="createdFiles")
    def created_files(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "created_files")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Output[int]:
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="movedFiles")
    def moved_files(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "moved_files")

    @property
    @pulumi.getter
    def stderr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stderr")

    @property
    @pulumi.getter
    def stdout(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stdout")

