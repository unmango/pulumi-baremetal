# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RmArgs',
    'TeeArgs',
    'WgetArgs',
]

@pulumi.output_type
class RmArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oneFileSystem":
            suggest = "one_file_system"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RmArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RmArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RmArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 files: Sequence[str],
                 dir: Optional[bool] = None,
                 force: Optional[bool] = None,
                 help: Optional[bool] = None,
                 one_file_system: Optional[bool] = None,
                 recursive: Optional[bool] = None,
                 verbose: Optional[bool] = None):
        pulumi.set(__self__, "files", files)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if one_file_system is not None:
            pulumi.set(__self__, "one_file_system", one_file_system)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)

    @property
    @pulumi.getter
    def files(self) -> Sequence[str]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def dir(self) -> Optional[bool]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def help(self) -> Optional[bool]:
        return pulumi.get(self, "help")

    @property
    @pulumi.getter(name="oneFileSystem")
    def one_file_system(self) -> Optional[bool]:
        return pulumi.get(self, "one_file_system")

    @property
    @pulumi.getter
    def recursive(self) -> Optional[bool]:
        return pulumi.get(self, "recursive")

    @property
    @pulumi.getter
    def verbose(self) -> Optional[bool]:
        return pulumi.get(self, "verbose")


@pulumi.output_type
class TeeArgs(dict):
    def __init__(__self__, *,
                 content: str,
                 files: Sequence[str],
                 append: Optional[bool] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "files", files)
        if append is not None:
            pulumi.set(__self__, "append", append)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def files(self) -> Sequence[str]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def append(self) -> Optional[bool]:
        return pulumi.get(self, "append")


@pulumi.output_type
class WgetArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appendOutput":
            suggest = "append_output"
        elif key == "caCertificateFile":
            suggest = "ca_certificate_file"
        elif key == "caDirectory":
            suggest = "ca_directory"
        elif key == "certificateType":
            suggest = "certificate_type"
        elif key == "continue":
            suggest = "continue_"
        elif key == "crlFile":
            suggest = "crl_file"
        elif key == "cutDirs":
            suggest = "cut_dirs"
        elif key == "directoryPrefix":
            suggest = "directory_prefix"
        elif key == "forceDirectories":
            suggest = "force_directories"
        elif key == "forceHtml":
            suggest = "force_html"
        elif key == "httpsOnly":
            suggest = "https_only"
        elif key == "inet4Only":
            suggest = "inet4_only"
        elif key == "inputFile":
            suggest = "input_file"
        elif key == "keepSessionCookies":
            suggest = "keep_session_cookies"
        elif key == "noClobber":
            suggest = "no_clobber"
        elif key == "noDirectories":
            suggest = "no_directories"
        elif key == "noDnsCache":
            suggest = "no_dns_cache"
        elif key == "noVerbose":
            suggest = "no_verbose"
        elif key == "outputDocument":
            suggest = "output_document"
        elif key == "outputFile":
            suggest = "output_file"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyType":
            suggest = "private_key_type"
        elif key == "randomWait":
            suggest = "random_wait"
        elif key == "reportSpeed":
            suggest = "report_speed"
        elif key == "saveCookies":
            suggest = "save_cookies"
        elif key == "showProgress":
            suggest = "show_progress"
        elif key == "startPos":
            suggest = "start_pos"
        elif key == "userAgent":
            suggest = "user_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WgetArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WgetArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WgetArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 urls: Sequence[str],
                 append_output: Optional[str] = None,
                 background: Optional[bool] = None,
                 base: Optional[str] = None,
                 ca_certificate_file: Optional[str] = None,
                 ca_directory: Optional[str] = None,
                 certificate: Optional[str] = None,
                 certificate_type: Optional[str] = None,
                 config: Optional[str] = None,
                 continue_: Optional[bool] = None,
                 crl_file: Optional[str] = None,
                 cut_dirs: Optional[int] = None,
                 debug: Optional[bool] = None,
                 directory_prefix: Optional[str] = None,
                 execute: Optional[Sequence[str]] = None,
                 force_directories: Optional[bool] = None,
                 force_html: Optional[bool] = None,
                 help: Optional[bool] = None,
                 https_only: Optional[bool] = None,
                 inet4_only: Optional[bool] = None,
                 input_file: Optional[str] = None,
                 keep_session_cookies: Optional[bool] = None,
                 no_clobber: Optional[bool] = None,
                 no_directories: Optional[bool] = None,
                 no_dns_cache: Optional[bool] = None,
                 no_verbose: Optional[bool] = None,
                 output_document: Optional[str] = None,
                 output_file: Optional[str] = None,
                 password: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_type: Optional[str] = None,
                 progress: Optional[str] = None,
                 quiet: Optional[bool] = None,
                 random_wait: Optional[bool] = None,
                 report_speed: Optional[str] = None,
                 save_cookies: Optional[str] = None,
                 show_progress: Optional[bool] = None,
                 start_pos: Optional[str] = None,
                 timeout: Optional[str] = None,
                 timestamping: Optional[bool] = None,
                 tries: Optional[int] = None,
                 user: Optional[str] = None,
                 user_agent: Optional[str] = None,
                 verbose: Optional[bool] = None,
                 version: Optional[str] = None,
                 wait: Optional[str] = None):
        pulumi.set(__self__, "urls", urls)
        if append_output is not None:
            pulumi.set(__self__, "append_output", append_output)
        if background is not None:
            pulumi.set(__self__, "background", background)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if ca_certificate_file is not None:
            pulumi.set(__self__, "ca_certificate_file", ca_certificate_file)
        if ca_directory is not None:
            pulumi.set(__self__, "ca_directory", ca_directory)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if continue_ is not None:
            pulumi.set(__self__, "continue_", continue_)
        if crl_file is not None:
            pulumi.set(__self__, "crl_file", crl_file)
        if cut_dirs is not None:
            pulumi.set(__self__, "cut_dirs", cut_dirs)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if directory_prefix is not None:
            pulumi.set(__self__, "directory_prefix", directory_prefix)
        if execute is not None:
            pulumi.set(__self__, "execute", execute)
        if force_directories is not None:
            pulumi.set(__self__, "force_directories", force_directories)
        if force_html is not None:
            pulumi.set(__self__, "force_html", force_html)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if https_only is not None:
            pulumi.set(__self__, "https_only", https_only)
        if inet4_only is not None:
            pulumi.set(__self__, "inet4_only", inet4_only)
        if input_file is not None:
            pulumi.set(__self__, "input_file", input_file)
        if keep_session_cookies is not None:
            pulumi.set(__self__, "keep_session_cookies", keep_session_cookies)
        if no_clobber is not None:
            pulumi.set(__self__, "no_clobber", no_clobber)
        if no_directories is not None:
            pulumi.set(__self__, "no_directories", no_directories)
        if no_dns_cache is not None:
            pulumi.set(__self__, "no_dns_cache", no_dns_cache)
        if no_verbose is not None:
            pulumi.set(__self__, "no_verbose", no_verbose)
        if output_document is not None:
            pulumi.set(__self__, "output_document", output_document)
        if output_file is not None:
            pulumi.set(__self__, "output_file", output_file)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_type is not None:
            pulumi.set(__self__, "private_key_type", private_key_type)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if random_wait is not None:
            pulumi.set(__self__, "random_wait", random_wait)
        if report_speed is not None:
            pulumi.set(__self__, "report_speed", report_speed)
        if save_cookies is not None:
            pulumi.set(__self__, "save_cookies", save_cookies)
        if show_progress is not None:
            pulumi.set(__self__, "show_progress", show_progress)
        if start_pos is not None:
            pulumi.set(__self__, "start_pos", start_pos)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timestamping is not None:
            pulumi.set(__self__, "timestamping", timestamping)
        if tries is not None:
            pulumi.set(__self__, "tries", tries)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="appendOutput")
    def append_output(self) -> Optional[str]:
        return pulumi.get(self, "append_output")

    @property
    @pulumi.getter
    def background(self) -> Optional[bool]:
        return pulumi.get(self, "background")

    @property
    @pulumi.getter
    def base(self) -> Optional[str]:
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="caCertificateFile")
    def ca_certificate_file(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificate_file")

    @property
    @pulumi.getter(name="caDirectory")
    def ca_directory(self) -> Optional[str]:
        return pulumi.get(self, "ca_directory")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="continue")
    def continue_(self) -> Optional[bool]:
        return pulumi.get(self, "continue_")

    @property
    @pulumi.getter(name="crlFile")
    def crl_file(self) -> Optional[str]:
        return pulumi.get(self, "crl_file")

    @property
    @pulumi.getter(name="cutDirs")
    def cut_dirs(self) -> Optional[int]:
        return pulumi.get(self, "cut_dirs")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="directoryPrefix")
    def directory_prefix(self) -> Optional[str]:
        return pulumi.get(self, "directory_prefix")

    @property
    @pulumi.getter
    def execute(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "execute")

    @property
    @pulumi.getter(name="forceDirectories")
    def force_directories(self) -> Optional[bool]:
        return pulumi.get(self, "force_directories")

    @property
    @pulumi.getter(name="forceHtml")
    def force_html(self) -> Optional[bool]:
        return pulumi.get(self, "force_html")

    @property
    @pulumi.getter
    def help(self) -> Optional[bool]:
        return pulumi.get(self, "help")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> Optional[bool]:
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter(name="inet4Only")
    def inet4_only(self) -> Optional[bool]:
        return pulumi.get(self, "inet4_only")

    @property
    @pulumi.getter(name="inputFile")
    def input_file(self) -> Optional[str]:
        return pulumi.get(self, "input_file")

    @property
    @pulumi.getter(name="keepSessionCookies")
    def keep_session_cookies(self) -> Optional[bool]:
        return pulumi.get(self, "keep_session_cookies")

    @property
    @pulumi.getter(name="noClobber")
    def no_clobber(self) -> Optional[bool]:
        return pulumi.get(self, "no_clobber")

    @property
    @pulumi.getter(name="noDirectories")
    def no_directories(self) -> Optional[bool]:
        return pulumi.get(self, "no_directories")

    @property
    @pulumi.getter(name="noDnsCache")
    def no_dns_cache(self) -> Optional[bool]:
        return pulumi.get(self, "no_dns_cache")

    @property
    @pulumi.getter(name="noVerbose")
    def no_verbose(self) -> Optional[bool]:
        return pulumi.get(self, "no_verbose")

    @property
    @pulumi.getter(name="outputDocument")
    def output_document(self) -> Optional[str]:
        return pulumi.get(self, "output_document")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyType")
    def private_key_type(self) -> Optional[str]:
        return pulumi.get(self, "private_key_type")

    @property
    @pulumi.getter
    def progress(self) -> Optional[str]:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def quiet(self) -> Optional[bool]:
        return pulumi.get(self, "quiet")

    @property
    @pulumi.getter(name="randomWait")
    def random_wait(self) -> Optional[bool]:
        return pulumi.get(self, "random_wait")

    @property
    @pulumi.getter(name="reportSpeed")
    def report_speed(self) -> Optional[str]:
        return pulumi.get(self, "report_speed")

    @property
    @pulumi.getter(name="saveCookies")
    def save_cookies(self) -> Optional[str]:
        return pulumi.get(self, "save_cookies")

    @property
    @pulumi.getter(name="showProgress")
    def show_progress(self) -> Optional[bool]:
        return pulumi.get(self, "show_progress")

    @property
    @pulumi.getter(name="startPos")
    def start_pos(self) -> Optional[str]:
        return pulumi.get(self, "start_pos")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def timestamping(self) -> Optional[bool]:
        return pulumi.get(self, "timestamping")

    @property
    @pulumi.getter
    def tries(self) -> Optional[int]:
        return pulumi.get(self, "tries")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[str]:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter
    def verbose(self) -> Optional[bool]:
        return pulumi.get(self, "verbose")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def wait(self) -> Optional[str]:
        return pulumi.get(self, "wait")


