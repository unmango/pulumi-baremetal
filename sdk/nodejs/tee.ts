// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * TEE(1)                                                       User Commands                                                      TEE(1)
 *
 * NAME
 *        tee - read from standard input and write to standard output and files
 *
 * SYNOPSIS
 *        tee [OPTION]... [FILE]...
 *
 * DESCRIPTION
 *        Copy standard input to each FILE, and also to standard output.
 *
 *        -a, --append
 *               append to the given FILEs, do not overwrite
 *     
 *        -i, --ignore-interrupts
 *               ignore interrupt signals
 *     
 *        -p     operate in a more appropriate MODE with pipes.
 *     
 *        --output-error[=MODE]
 *               set behavior on write error.  See MODE below
 *     
 *        --help display this help and exit
 *     
 *        --version
 *               output version information and exit
 *
 *    MODE determines behavior with write errors on the outputs:
 *        warn   diagnose errors writing to any output
 *
 *        warn-nopipe
 *               diagnose errors writing to any output not a pipe
 *     
 *        exit   exit on error writing to any output
 *     
 *        exit-nopipe
 *               exit on error writing to any output not a pipe
 *     
 *        The default MODE for the -p option is 'warn-nopipe'.  With "nopipe" MODEs, exit immediately if all outputs become broken pipes.
 *        The default operation when --output-error is not specified, is to exit immediately on error writing to a pipe, and diagnose er‐
 *        rors writing to non pipe outputs.
 *
 * AUTHOR
 *        Written by Mike Parker, Richard M. Stallman, and David MacKenzie.
 *
 * REPORTING BUGS
 *        GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
 *        Report any translation bugs to <https://translationproject.org/team/>
 *
 * COPYRIGHT
 *        Copyright  ©  2024  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later  <https://gnu.org/li‐
 *        censes/gpl.html>.
 *        This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
 *
 * SEE ALSO
 *        Full documentation <https://www.gnu.org/software/coreutils/tee>
 *        or available locally via: info '(coreutils) tee invocation'
 *
 * GNU coreutils 9.5                                             March 2024                                                        TEE(1)
 */
export class Tee extends pulumi.CustomResource {
    /**
     * Get an existing Tee resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Tee {
        return new Tee(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'baremetal:index:Tee';

    /**
     * Returns true if the given object is an instance of Tee.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tee {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tee.__pulumiType;
    }

    public readonly create!: pulumi.Output<outputs.TeeOpts | undefined>;
    public /*out*/ readonly stderr!: pulumi.Output<string>;
    public readonly stdin!: pulumi.Output<string>;
    public /*out*/ readonly stdout!: pulumi.Output<string>;
    public readonly test!: pulumi.Output<outputs.v1alpha1.CommandRequest>;

    /**
     * Create a Tee resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.stdin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stdin'");
            }
            if ((!args || args.test === undefined) && !opts.urn) {
                throw new Error("Missing required property 'test'");
            }
            resourceInputs["create"] = args ? args.create : undefined;
            resourceInputs["stdin"] = args ? args.stdin : undefined;
            resourceInputs["test"] = args ? args.test : undefined;
            resourceInputs["stderr"] = undefined /*out*/;
            resourceInputs["stdout"] = undefined /*out*/;
        } else {
            resourceInputs["create"] = undefined /*out*/;
            resourceInputs["stderr"] = undefined /*out*/;
            resourceInputs["stdin"] = undefined /*out*/;
            resourceInputs["stdout"] = undefined /*out*/;
            resourceInputs["test"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tee.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Tee resource.
 */
export interface TeeArgs {
    create?: pulumi.Input<inputs.TeeOptsArgs>;
    stdin: pulumi.Input<string>;
    test: pulumi.Input<inputs.v1alpha1.CommandRequestArgs>;
}
