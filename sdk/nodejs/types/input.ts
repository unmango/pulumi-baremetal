// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace coreutils {
    export interface ChmodArgsArgs {
        changes?: pulumi.Input<boolean>;
        files: pulumi.Input<pulumi.Input<string>[]>;
        help?: pulumi.Input<boolean>;
        mode?: pulumi.Input<pulumi.Input<string>[]>;
        noPreserveRoot?: pulumi.Input<boolean>;
        octalMode?: pulumi.Input<string>;
        preserveRoot?: pulumi.Input<boolean>;
        quiet?: pulumi.Input<boolean>;
        recursive?: pulumi.Input<boolean>;
        reference?: pulumi.Input<string>;
        verbose?: pulumi.Input<boolean>;
        version?: pulumi.Input<boolean>;
    }

    export interface MkdirArgsArgs {
        directory: pulumi.Input<pulumi.Input<string>[]>;
        help?: pulumi.Input<boolean>;
        mode?: pulumi.Input<string>;
        parents?: pulumi.Input<boolean>;
        verbose?: pulumi.Input<boolean>;
        version?: pulumi.Input<boolean>;
    }

    export interface MktempArgsArgs {
        directory?: pulumi.Input<boolean>;
        dryRun?: pulumi.Input<boolean>;
        help?: pulumi.Input<boolean>;
        p?: pulumi.Input<string>;
        quiet?: pulumi.Input<boolean>;
        suffix?: pulumi.Input<string>;
        t?: pulumi.Input<boolean>;
        template?: pulumi.Input<string>;
        tmpdir?: pulumi.Input<boolean>;
        version?: pulumi.Input<boolean>;
    }

    export interface MvArgsArgs {
        backup?: pulumi.Input<string>;
        destination?: pulumi.Input<string>;
        directory?: pulumi.Input<string>;
        force?: pulumi.Input<boolean>;
        help?: pulumi.Input<boolean>;
        noClobber?: pulumi.Input<boolean>;
        noTargetDirectory?: pulumi.Input<boolean>;
        source: pulumi.Input<pulumi.Input<string>[]>;
        stripTrailingSlashes?: pulumi.Input<boolean>;
        suffix?: pulumi.Input<string>;
        targetDirectory?: pulumi.Input<string>;
        update?: pulumi.Input<boolean>;
        verbose?: pulumi.Input<boolean>;
        version?: pulumi.Input<boolean>;
    }

    export interface RmArgsArgs {
        dir?: pulumi.Input<boolean>;
        files: pulumi.Input<pulumi.Input<string>[]>;
        force?: pulumi.Input<boolean>;
        help?: pulumi.Input<boolean>;
        oneFileSystem?: pulumi.Input<boolean>;
        recursive?: pulumi.Input<boolean>;
        verbose?: pulumi.Input<boolean>;
    }

    export interface TarArgsArgs {
        anchored?: pulumi.Input<boolean>;
        append?: pulumi.Input<boolean>;
        args?: pulumi.Input<pulumi.Input<string>[]>;
        bzip2?: pulumi.Input<boolean>;
        create?: pulumi.Input<boolean>;
        delete?: pulumi.Input<boolean>;
        diff?: pulumi.Input<boolean>;
        directory?: pulumi.Input<string>;
        exclude?: pulumi.Input<string>;
        excludeFrom?: pulumi.Input<string>;
        excludeVcs?: pulumi.Input<boolean>;
        excludeVcsIgnores?: pulumi.Input<boolean>;
        extract?: pulumi.Input<boolean>;
        file?: pulumi.Input<string>;
        gzip?: pulumi.Input<boolean>;
        ignoreCommandError?: pulumi.Input<boolean>;
        keepDirectorySymlink?: pulumi.Input<boolean>;
        keepNewerFiles?: pulumi.Input<boolean>;
        keepOldfiles?: pulumi.Input<boolean>;
        list?: pulumi.Input<boolean>;
        lzip?: pulumi.Input<boolean>;
        lzma?: pulumi.Input<boolean>;
        lzop?: pulumi.Input<boolean>;
        noAnchored?: pulumi.Input<boolean>;
        noOverwriteDir?: pulumi.Input<boolean>;
        noSeek?: pulumi.Input<boolean>;
        overwrite?: pulumi.Input<boolean>;
        overwriteDir?: pulumi.Input<boolean>;
        removeFiles?: pulumi.Input<boolean>;
        skipOldFiles?: pulumi.Input<boolean>;
        sparse?: pulumi.Input<boolean>;
        stripComponents?: pulumi.Input<number>;
        suffix?: pulumi.Input<string>;
        toStdout?: pulumi.Input<boolean>;
        transform?: pulumi.Input<string>;
        unlinkFirst?: pulumi.Input<boolean>;
        update?: pulumi.Input<boolean>;
        verbose?: pulumi.Input<boolean>;
        verify?: pulumi.Input<boolean>;
        version?: pulumi.Input<boolean>;
        xz?: pulumi.Input<boolean>;
        zstd?: pulumi.Input<boolean>;
    }

    export interface TeeArgsArgs {
        append?: pulumi.Input<boolean>;
        files: pulumi.Input<pulumi.Input<string>[]>;
        stdin?: pulumi.Input<string>;
    }

    export interface WgetArgsArgs {
        appendOutput?: pulumi.Input<string>;
        background?: pulumi.Input<boolean>;
        base?: pulumi.Input<string>;
        caCertificateFile?: pulumi.Input<string>;
        caDirectory?: pulumi.Input<string>;
        certificate?: pulumi.Input<string>;
        certificateType?: pulumi.Input<string>;
        config?: pulumi.Input<string>;
        continue?: pulumi.Input<boolean>;
        crlFile?: pulumi.Input<string>;
        cutDirs?: pulumi.Input<number>;
        debug?: pulumi.Input<boolean>;
        directoryPrefix?: pulumi.Input<string>;
        execute?: pulumi.Input<pulumi.Input<string>[]>;
        forceDirectories?: pulumi.Input<boolean>;
        forceHtml?: pulumi.Input<boolean>;
        help?: pulumi.Input<boolean>;
        httpsOnly?: pulumi.Input<boolean>;
        inet4Only?: pulumi.Input<boolean>;
        inputFile?: pulumi.Input<string>;
        keepSessionCookies?: pulumi.Input<boolean>;
        noClobber?: pulumi.Input<boolean>;
        noDirectories?: pulumi.Input<boolean>;
        noDnsCache?: pulumi.Input<boolean>;
        noVerbose?: pulumi.Input<boolean>;
        outputDocument?: pulumi.Input<string>;
        outputFile?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        privateKey?: pulumi.Input<string>;
        privateKeyType?: pulumi.Input<string>;
        progress?: pulumi.Input<string>;
        quiet?: pulumi.Input<boolean>;
        randomWait?: pulumi.Input<boolean>;
        reportSpeed?: pulumi.Input<string>;
        saveCookies?: pulumi.Input<string>;
        showProgress?: pulumi.Input<boolean>;
        startPos?: pulumi.Input<string>;
        timeout?: pulumi.Input<string>;
        timestamping?: pulumi.Input<boolean>;
        tries?: pulumi.Input<number>;
        urls: pulumi.Input<pulumi.Input<string>[]>;
        user?: pulumi.Input<string>;
        userAgent?: pulumi.Input<string>;
        verbose?: pulumi.Input<boolean>;
        version?: pulumi.Input<string>;
        wait?: pulumi.Input<string>;
    }
}

export namespace kubeadm {
    export interface KubeadmArgsArgs {
        commands: pulumi.Input<pulumi.Input<string>[]>;
    }
}
