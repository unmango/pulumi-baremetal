// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.Baremetal.Cmd
{
    [BaremetalResourceType("baremetal:cmd:Mv")]
    public partial class Mv : global::Pulumi.CustomResource
    {
        [Output("args")]
        public Output<Outputs.MvArgs> Args { get; private set; } = null!;

        [Output("createdFiles")]
        public Output<ImmutableArray<string>> CreatedFiles { get; private set; } = null!;

        [Output("exitCode")]
        public Output<int> ExitCode { get; private set; } = null!;

        [Output("movedFiles")]
        public Output<ImmutableDictionary<string, string>> MovedFiles { get; private set; } = null!;

        [Output("stderr")]
        public Output<string> Stderr { get; private set; } = null!;

        [Output("stdout")]
        public Output<string> Stdout { get; private set; } = null!;


        /// <summary>
        /// Create a Mv resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Mv(string name, MvArgs args, CustomResourceOptions? options = null)
            : base("baremetal:cmd:Mv", name, args ?? new MvArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Mv(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("baremetal:cmd:Mv", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/unmango",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Mv resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Mv Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Mv(name, id, options);
        }
    }

    public sealed class MvArgs : global::Pulumi.ResourceArgs
    {
        [Input("backup")]
        public Input<string>? Backup { get; set; }

        [Input("destination")]
        public Input<string>? Destination { get; set; }

        [Input("directory")]
        public Input<string>? Directory { get; set; }

        [Input("force")]
        public Input<bool>? Force { get; set; }

        [Input("help")]
        public Input<bool>? Help { get; set; }

        [Input("noClobber")]
        public Input<bool>? NoClobber { get; set; }

        [Input("noTargetDirectory")]
        public Input<bool>? NoTargetDirectory { get; set; }

        [Input("source", required: true)]
        private InputList<string>? _source;
        public InputList<string> Source
        {
            get => _source ?? (_source = new InputList<string>());
            set => _source = value;
        }

        [Input("stripTrailingSlashes")]
        public Input<bool>? StripTrailingSlashes { get; set; }

        [Input("suffix")]
        public Input<string>? Suffix { get; set; }

        [Input("targetDirectory")]
        public Input<string>? TargetDirectory { get; set; }

        [Input("update")]
        public Input<bool>? Update { get; set; }

        [Input("verbose")]
        public Input<bool>? Verbose { get; set; }

        [Input("version")]
        public Input<bool>? Version { get; set; }

        public MvArgs()
        {
        }
        public static new MvArgs Empty => new MvArgs();
    }
}
