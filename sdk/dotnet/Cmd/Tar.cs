// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.Baremetal.Cmd
{
    [BaremetalResourceType("baremetal:cmd:Tar")]
    public partial class Tar : global::Pulumi.CustomResource
    {
        [Output("args")]
        public Output<Outputs.TarArgs> Args { get; private set; } = null!;

        [Output("createdFiles")]
        public Output<ImmutableArray<string>> CreatedFiles { get; private set; } = null!;

        [Output("exitCode")]
        public Output<int> ExitCode { get; private set; } = null!;

        [Output("movedFiles")]
        public Output<ImmutableDictionary<string, string>> MovedFiles { get; private set; } = null!;

        [Output("stderr")]
        public Output<string> Stderr { get; private set; } = null!;

        [Output("stdout")]
        public Output<string> Stdout { get; private set; } = null!;


        /// <summary>
        /// Create a Tar resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Tar(string name, TarArgs? args = null, CustomResourceOptions? options = null)
            : base("baremetal:cmd:Tar", name, args ?? new TarArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Tar(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("baremetal:cmd:Tar", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/unmango",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Tar resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Tar Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Tar(name, id, options);
        }
    }

    public sealed class TarArgs : global::Pulumi.ResourceArgs
    {
        [Input("append")]
        public Input<bool>? Append { get; set; }

        [Input("args")]
        private InputList<string>? _args;
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("bzip2")]
        public Input<bool>? Bzip2 { get; set; }

        [Input("create")]
        public Input<bool>? Create { get; set; }

        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        [Input("diff")]
        public Input<bool>? Diff { get; set; }

        [Input("directory")]
        public Input<string>? Directory { get; set; }

        [Input("exclude")]
        public Input<string>? Exclude { get; set; }

        [Input("excludeFrom")]
        public Input<string>? ExcludeFrom { get; set; }

        [Input("excludeVcs")]
        public Input<bool>? ExcludeVcs { get; set; }

        [Input("excludeVcsIgnores")]
        public Input<bool>? ExcludeVcsIgnores { get; set; }

        [Input("extract")]
        public Input<bool>? Extract { get; set; }

        [Input("file")]
        public Input<string>? File { get; set; }

        [Input("gzip")]
        public Input<bool>? Gzip { get; set; }

        [Input("ignoreCommandError")]
        public Input<bool>? IgnoreCommandError { get; set; }

        [Input("keepDirectorySymlink")]
        public Input<bool>? KeepDirectorySymlink { get; set; }

        [Input("keepNewerFiles")]
        public Input<bool>? KeepNewerFiles { get; set; }

        [Input("keepOldfiles")]
        public Input<bool>? KeepOldfiles { get; set; }

        [Input("list")]
        public Input<bool>? List { get; set; }

        [Input("lzip")]
        public Input<bool>? Lzip { get; set; }

        [Input("lzma")]
        public Input<bool>? Lzma { get; set; }

        [Input("lzop")]
        public Input<bool>? Lzop { get; set; }

        [Input("noOverwriteDir")]
        public Input<bool>? NoOverwriteDir { get; set; }

        [Input("noSeek")]
        public Input<bool>? NoSeek { get; set; }

        [Input("overwrite")]
        public Input<bool>? Overwrite { get; set; }

        [Input("overwriteDir")]
        public Input<bool>? OverwriteDir { get; set; }

        [Input("removeFiles")]
        public Input<bool>? RemoveFiles { get; set; }

        [Input("skipOldFiles")]
        public Input<bool>? SkipOldFiles { get; set; }

        [Input("sparse")]
        public Input<bool>? Sparse { get; set; }

        [Input("stripComponents")]
        public Input<int>? StripComponents { get; set; }

        [Input("suffix")]
        public Input<string>? Suffix { get; set; }

        [Input("toStdout")]
        public Input<bool>? ToStdout { get; set; }

        [Input("transform")]
        public Input<string>? Transform { get; set; }

        [Input("unlinkFirst")]
        public Input<bool>? UnlinkFirst { get; set; }

        [Input("update")]
        public Input<bool>? Update { get; set; }

        [Input("verbose")]
        public Input<bool>? Verbose { get; set; }

        [Input("verify")]
        public Input<bool>? Verify { get; set; }

        [Input("xz")]
        public Input<bool>? Xz { get; set; }

        [Input("zstd")]
        public Input<bool>? Zstd { get; set; }

        public TarArgs()
        {
        }
        public static new TarArgs Empty => new TarArgs();
    }
}
