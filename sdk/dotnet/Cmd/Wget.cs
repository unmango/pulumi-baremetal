// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.Baremetal.Cmd
{
    [BaremetalResourceType("baremetal:cmd:Wget")]
    public partial class Wget : global::Pulumi.CustomResource
    {
        [Output("args")]
        public Output<Outputs.WgetArgs> Args { get; private set; } = null!;

        [Output("createdFiles")]
        public Output<ImmutableArray<string>> CreatedFiles { get; private set; } = null!;

        [Output("exitCode")]
        public Output<int> ExitCode { get; private set; } = null!;

        [Output("stderr")]
        public Output<string> Stderr { get; private set; } = null!;

        [Output("stdout")]
        public Output<string> Stdout { get; private set; } = null!;


        /// <summary>
        /// Create a Wget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Wget(string name, WgetArgs args, CustomResourceOptions? options = null)
            : base("baremetal:cmd:Wget", name, args ?? new WgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Wget(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("baremetal:cmd:Wget", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/unmango",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Wget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Wget Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Wget(name, id, options);
        }
    }

    public sealed class WgetArgs : global::Pulumi.ResourceArgs
    {
        [Input("appendOutput")]
        public Input<string>? AppendOutput { get; set; }

        [Input("background")]
        public Input<bool>? Background { get; set; }

        [Input("base")]
        public Input<string>? Base { get; set; }

        [Input("caCertificateFile")]
        public Input<string>? CaCertificateFile { get; set; }

        [Input("caDirectory")]
        public Input<string>? CaDirectory { get; set; }

        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificateType")]
        public Input<string>? CertificateType { get; set; }

        [Input("config")]
        public Input<string>? Config { get; set; }

        [Input("continue")]
        public Input<bool>? Continue { get; set; }

        [Input("crlFile")]
        public Input<string>? CrlFile { get; set; }

        [Input("cutDirs")]
        public Input<int>? CutDirs { get; set; }

        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        [Input("directoryPrefix")]
        public Input<string>? DirectoryPrefix { get; set; }

        [Input("execute")]
        private InputList<string>? _execute;
        public InputList<string> Execute
        {
            get => _execute ?? (_execute = new InputList<string>());
            set => _execute = value;
        }

        [Input("forceDirectories")]
        public Input<bool>? ForceDirectories { get; set; }

        [Input("forceHtml")]
        public Input<bool>? ForceHtml { get; set; }

        [Input("help")]
        public Input<bool>? Help { get; set; }

        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        [Input("inet4Only")]
        public Input<bool>? Inet4Only { get; set; }

        [Input("inputFile")]
        public Input<string>? InputFile { get; set; }

        [Input("keepSessionCookies")]
        public Input<bool>? KeepSessionCookies { get; set; }

        [Input("noClobber")]
        public Input<bool>? NoClobber { get; set; }

        [Input("noDirectories")]
        public Input<bool>? NoDirectories { get; set; }

        [Input("noDnsCache")]
        public Input<bool>? NoDnsCache { get; set; }

        [Input("noVerbose")]
        public Input<bool>? NoVerbose { get; set; }

        [Input("outputDocument")]
        public Input<string>? OutputDocument { get; set; }

        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyType")]
        private Input<string>? _privateKeyType;
        public Input<string>? PrivateKeyType
        {
            get => _privateKeyType;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyType = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("progress")]
        public Input<string>? Progress { get; set; }

        [Input("quiet")]
        public Input<bool>? Quiet { get; set; }

        [Input("randomWait")]
        public Input<bool>? RandomWait { get; set; }

        [Input("reportSpeed")]
        public Input<string>? ReportSpeed { get; set; }

        [Input("saveCookies")]
        public Input<string>? SaveCookies { get; set; }

        [Input("showProgress")]
        public Input<bool>? ShowProgress { get; set; }

        [Input("startPos")]
        public Input<string>? StartPos { get; set; }

        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        [Input("timestamping")]
        public Input<bool>? Timestamping { get; set; }

        [Input("tries")]
        public Input<int>? Tries { get; set; }

        [Input("urls", required: true)]
        private InputList<string>? _urls;
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        [Input("user")]
        public Input<string>? User { get; set; }

        [Input("userAgent")]
        public Input<string>? UserAgent { get; set; }

        [Input("verbose")]
        public Input<bool>? Verbose { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("wait")]
        public Input<string>? Wait { get; set; }

        public WgetArgs()
        {
        }
        public static new WgetArgs Empty => new WgetArgs();
    }
}
